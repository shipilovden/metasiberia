{"version":3,"sources":["../../src/binary_reader.ts","../../src/binary_writer.ts","../../src/utils.ts","../../src/connection_id.ts","../../src/time_duration.ts","../../src/timestamp.ts","../../src/identity.ts","../../src/schedule_at.ts","../../src/algebraic_type.ts","../../src/algebraic_value.ts","../../src/client_api/row_size_hint_type.ts","../../src/client_api/bsatn_row_list_type.ts","../../src/client_api/call_reducer_type.ts","../../src/client_api/subscribe_type.ts","../../src/client_api/one_off_query_type.ts","../../src/client_api/query_id_type.ts","../../src/client_api/subscribe_single_type.ts","../../src/client_api/subscribe_multi_type.ts","../../src/client_api/unsubscribe_type.ts","../../src/client_api/unsubscribe_multi_type.ts","../../src/client_api/client_message_type.ts","../../src/client_api/query_update_type.ts","../../src/client_api/compressable_query_update_type.ts","../../src/client_api/table_update_type.ts","../../src/client_api/database_update_type.ts","../../src/client_api/energy_quanta_type.ts","../../src/client_api/identity_token_type.ts","../../src/client_api/initial_subscription_type.ts","../../src/client_api/one_off_table_type.ts","../../src/client_api/one_off_query_response_type.ts","../../src/client_api/reducer_call_info_type.ts","../../src/client_api/update_status_type.ts","../../src/client_api/transaction_update_type.ts","../../src/client_api/transaction_update_light_type.ts","../../src/client_api/subscribe_rows_type.ts","../../src/client_api/subscribe_applied_type.ts","../../src/client_api/unsubscribe_applied_type.ts","../../src/client_api/subscription_error_type.ts","../../src/client_api/subscribe_multi_applied_type.ts","../../src/client_api/unsubscribe_multi_applied_type.ts","../../src/client_api/server_message_type.ts","../../src/event_emitter.ts","../../src/operations_map.ts","../../src/logger.ts","../../src/table_cache.ts","../../src/client_cache.ts","../../src/decompress.ts","../../src/websocket_decompress_adapter.ts","../../src/db_connection_builder.ts","../../src/subscription_builder_impl.ts","../../src/db_connection_impl.ts"],"names":["ScheduleAt","AlgebraicType","Type","RowSizeHint","BsatnRowList","CallReducer","Subscribe","OneOffQuery","QueryId","SubscribeSingle","SubscribeMulti","Unsubscribe","UnsubscribeMulti","ClientMessage","QueryUpdate","CompressableQueryUpdate","TableUpdate","DatabaseUpdate","EnergyQuanta","IdentityToken","InitialSubscription","OneOffTable","OneOffQueryResponse","ReducerCallInfo","UpdateStatus","TransactionUpdate","TransactionUpdateLight","SubscribeRows","SubscribeApplied","UnsubscribeApplied","SubscriptionError","SubscribeMultiApplied","UnsubscribeMultiApplied","ServerMessage","TableCache","primaryKey","DbConnectionBuilder","DbConnectionImpl","SubscriptionBuilderImpl","event","eventContext","callbacks"],"mappings":"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","file":"index.js","sourcesContent":["export default class BinaryReader {\n  #buffer: DataView;\n  #offset: number = 0;\n\n  constructor(input: Uint8Array) {\n    this.#buffer = new DataView(input.buffer);\n    this.#offset = input.byteOffset;\n  }\n\n  get offset(): number {\n    return this.#offset;\n  }\n\n  readUInt8Array(): Uint8Array {\n    const length = this.readU32();\n    const value: Uint8Array = new Uint8Array(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    this.#offset += length;\n    return value;\n  }\n\n  readBool(): boolean {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value !== 0;\n  }\n\n  readByte(): number {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readBytes(length: number): Uint8Array {\n    const value: DataView = new DataView(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    this.#offset += length;\n    return new Uint8Array(value.buffer);\n  }\n\n  readI8(): number {\n    const value = this.#buffer.getInt8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readU8(): number {\n    const value = this.#buffer.getUint8(this.#offset);\n    this.#offset += 1;\n    return value;\n  }\n\n  readI16(): number {\n    const value = this.#buffer.getInt16(this.#offset, true);\n    this.#offset += 2;\n    return value;\n  }\n\n  readU16(): number {\n    const value = this.#buffer.getUint16(this.#offset, true);\n    this.#offset += 2;\n    return value;\n  }\n\n  readI32(): number {\n    const value = this.#buffer.getInt32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readU32(): number {\n    const value = this.#buffer.getUint32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readI64(): bigint {\n    const value = this.#buffer.getBigInt64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readU64(): bigint {\n    const value = this.#buffer.getBigUint64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readU128(): bigint {\n    const lowerPart = this.#buffer.getBigUint64(this.#offset, true);\n    const upperPart = this.#buffer.getBigUint64(this.#offset + 8, true);\n    this.#offset += 16;\n\n    return (upperPart << BigInt(64)) + lowerPart;\n  }\n\n  readI128(): bigint {\n    const lowerPart = this.#buffer.getBigUint64(this.#offset, true);\n    const upperPart = this.#buffer.getBigInt64(this.#offset + 8, true);\n    this.#offset += 16;\n\n    return (upperPart << BigInt(64)) + lowerPart;\n  }\n\n  readU256(): bigint {\n    const p0 = this.#buffer.getBigUint64(this.#offset, true);\n    const p1 = this.#buffer.getBigUint64(this.#offset + 8, true);\n    const p2 = this.#buffer.getBigUint64(this.#offset + 16, true);\n    const p3 = this.#buffer.getBigUint64(this.#offset + 24, true);\n    this.#offset += 32;\n\n    return (\n      (p3 << BigInt(3 * 64)) +\n      (p2 << BigInt(2 * 64)) +\n      (p1 << BigInt(1 * 64)) +\n      p0\n    );\n  }\n\n  readI256(): bigint {\n    const p0 = this.#buffer.getBigUint64(this.#offset, true);\n    const p1 = this.#buffer.getBigUint64(this.#offset + 8, true);\n    const p2 = this.#buffer.getBigUint64(this.#offset + 16, true);\n    const p3 = this.#buffer.getBigInt64(this.#offset + 24, true);\n    this.#offset += 32;\n\n    return (\n      (p3 << BigInt(3 * 64)) +\n      (p2 << BigInt(2 * 64)) +\n      (p1 << BigInt(1 * 64)) +\n      p0\n    );\n  }\n\n  readF32(): number {\n    const value = this.#buffer.getFloat32(this.#offset, true);\n    this.#offset += 4;\n    return value;\n  }\n\n  readF64(): number {\n    const value = this.#buffer.getFloat64(this.#offset, true);\n    this.#offset += 8;\n    return value;\n  }\n\n  readString(): string {\n    const length = this.readU32();\n    const uint8Array = new Uint8Array(\n      this.#buffer.buffer,\n      this.#offset,\n      length\n    );\n    const decoder = new TextDecoder('utf-8');\n    const value = decoder.decode(uint8Array);\n    this.#offset += length;\n    return value;\n  }\n}\n","export default class BinaryWriter {\n  #buffer: Uint8Array;\n  #view: DataView;\n  #offset: number = 0;\n\n  constructor(size: number) {\n    this.#buffer = new Uint8Array(size);\n    this.#view = new DataView(this.#buffer.buffer);\n  }\n\n  #expandBuffer(additionalCapacity: number): void {\n    const minCapacity = this.#offset + additionalCapacity + 1;\n    if (minCapacity <= this.#buffer.length) return;\n    let newCapacity = this.#buffer.length * 2;\n    if (newCapacity < minCapacity) newCapacity = minCapacity;\n    const newBuffer = new Uint8Array(newCapacity);\n    newBuffer.set(this.#buffer);\n    this.#buffer = newBuffer;\n    this.#view = new DataView(this.#buffer.buffer);\n  }\n\n  getBuffer(): Uint8Array {\n    return this.#buffer.slice(0, this.#offset);\n  }\n\n  writeUInt8Array(value: Uint8Array): void {\n    const length = value.length;\n\n    this.#expandBuffer(4 + length);\n\n    this.writeU32(length);\n    this.#buffer.set(value, this.#offset);\n    this.#offset += value.length;\n  }\n\n  writeBool(value: boolean): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value ? 1 : 0);\n    this.#offset += 1;\n  }\n\n  writeByte(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeI8(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setInt8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeU8(value: number): void {\n    this.#expandBuffer(1);\n    this.#view.setUint8(this.#offset, value);\n    this.#offset += 1;\n  }\n\n  writeI16(value: number): void {\n    this.#expandBuffer(2);\n    this.#view.setInt16(this.#offset, value, true);\n    this.#offset += 2;\n  }\n\n  writeU16(value: number): void {\n    this.#expandBuffer(2);\n    this.#view.setUint16(this.#offset, value, true);\n    this.#offset += 2;\n  }\n\n  writeI32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setInt32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeU32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setUint32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeI64(value: bigint): void {\n    this.#expandBuffer(8);\n    this.#view.setBigInt64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeU64(value: bigint): void {\n    this.#expandBuffer(8);\n    this.#view.setBigUint64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeU128(value: bigint): void {\n    this.#expandBuffer(16);\n    const lowerPart = value & BigInt('0xFFFFFFFFFFFFFFFF');\n    const upperPart = value >> BigInt(64);\n    this.#view.setBigUint64(this.#offset, lowerPart, true);\n    this.#view.setBigUint64(this.#offset + 8, upperPart, true);\n    this.#offset += 16;\n  }\n\n  writeI128(value: bigint): void {\n    this.#expandBuffer(16);\n    const lowerPart = value & BigInt('0xFFFFFFFFFFFFFFFF');\n    const upperPart = value >> BigInt(64);\n    this.#view.setBigInt64(this.#offset, lowerPart, true);\n    this.#view.setBigInt64(this.#offset + 8, upperPart, true);\n    this.#offset += 16;\n  }\n\n  writeU256(value: bigint): void {\n    this.#expandBuffer(32);\n    const low_64_mask = BigInt('0xFFFFFFFFFFFFFFFF');\n    const p0 = value & low_64_mask;\n    const p1 = (value >> BigInt(64 * 1)) & low_64_mask;\n    const p2 = (value >> BigInt(64 * 2)) & low_64_mask;\n    const p3 = value >> BigInt(64 * 3);\n    this.#view.setBigUint64(this.#offset + 8 * 0, p0, true);\n    this.#view.setBigUint64(this.#offset + 8 * 1, p1, true);\n    this.#view.setBigUint64(this.#offset + 8 * 2, p2, true);\n    this.#view.setBigUint64(this.#offset + 8 * 3, p3, true);\n    this.#offset += 32;\n  }\n\n  writeI256(value: bigint): void {\n    this.#expandBuffer(32);\n    const low_64_mask = BigInt('0xFFFFFFFFFFFFFFFF');\n    const p0 = value & low_64_mask;\n    const p1 = (value >> BigInt(64 * 1)) & low_64_mask;\n    const p2 = (value >> BigInt(64 * 2)) & low_64_mask;\n    const p3 = value >> BigInt(64 * 3);\n    this.#view.setBigUint64(this.#offset + 8 * 0, p0, true);\n    this.#view.setBigUint64(this.#offset + 8 * 1, p1, true);\n    this.#view.setBigUint64(this.#offset + 8 * 2, p2, true);\n    this.#view.setBigInt64(this.#offset + 8 * 3, p3, true);\n    this.#offset += 32;\n  }\n\n  writeF32(value: number): void {\n    this.#expandBuffer(4);\n    this.#view.setFloat32(this.#offset, value, true);\n    this.#offset += 4;\n  }\n\n  writeF64(value: number): void {\n    this.#expandBuffer(8);\n    this.#view.setFloat64(this.#offset, value, true);\n    this.#offset += 8;\n  }\n\n  writeString(value: string): void {\n    const encoder = new TextEncoder();\n    const encodedString = encoder.encode(value);\n    this.writeU32(encodedString.length);\n    this.#expandBuffer(encodedString.length);\n    this.#buffer.set(encodedString, this.#offset);\n    this.#offset += encodedString.length;\n  }\n}\n","import BinaryReader from './binary_reader';\nimport BinaryWriter from './binary_writer';\n\nexport function toPascalCase(s: string): string {\n  const str = s.replace(/([-_][a-z])/gi, $1 => {\n    return $1.toUpperCase().replace('-', '').replace('_', '');\n  });\n\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function deepEqual(obj1: any, obj2: any): boolean {\n  // If both are strictly equal (covers primitives and reference equality), return true\n  if (obj1 === obj2) return true;\n\n  // If either is a primitive type or one is null, return false since we already checked for strict equality\n  if (\n    typeof obj1 !== 'object' ||\n    obj1 === null ||\n    typeof obj2 !== 'object' ||\n    obj2 === null\n  ) {\n    return false;\n  }\n\n  // Get keys of both objects\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  // If number of keys is different, return false\n  if (keys1.length !== keys2.length) return false;\n\n  // Check all keys and compare values recursively\n  for (let key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function uint8ArrayToHexString(array: Uint8Array): string {\n  return Array.prototype.map\n    .call(array, x => ('00' + x.toString(16)).slice(-2))\n    .join('');\n}\n\nexport function uint8ArrayToU128(array: Uint8Array): bigint {\n  if (array.length != 16) {\n    throw new Error(`Uint8Array is not 16 bytes long: ${array}`);\n  }\n  return new BinaryReader(array).readU128();\n}\n\nexport function uint8ArrayToU256(array: Uint8Array): bigint {\n  if (array.length != 32) {\n    throw new Error(`Uint8Array is not 32 bytes long: [${array}]`);\n  }\n  return new BinaryReader(array).readU256();\n}\n\nexport function hexStringToUint8Array(str: string): Uint8Array {\n  if (str.startsWith('0x')) {\n    str = str.slice(2);\n  }\n  let matches = str.match(/.{1,2}/g) || [];\n  let data = Uint8Array.from(matches.map((byte: string) => parseInt(byte, 16)));\n  if (data.length != 32) {\n    return new Uint8Array(0);\n  }\n  return data;\n}\n\nexport function hexStringToU128(str: string): bigint {\n  return uint8ArrayToU128(hexStringToUint8Array(str));\n}\n\nexport function hexStringToU256(str: string): bigint {\n  return uint8ArrayToU256(hexStringToUint8Array(str));\n}\n\nexport function u128ToUint8Array(data: bigint): Uint8Array {\n  let writer = new BinaryWriter(16);\n  writer.writeU128(data);\n  return writer.getBuffer();\n}\n\nexport function u128ToHexString(data: bigint): string {\n  return uint8ArrayToHexString(u128ToUint8Array(data));\n}\n\nexport function u256ToUint8Array(data: bigint): Uint8Array {\n  let writer = new BinaryWriter(32);\n  writer.writeU256(data);\n  return writer.getBuffer();\n}\n\nexport function u256ToHexString(data: bigint): string {\n  return uint8ArrayToHexString(u256ToUint8Array(data));\n}\n","import { hexStringToU128, u128ToHexString, u128ToUint8Array } from './utils';\n\n/**\n * A unique identifier for a client connected to a database.\n */\nexport class ConnectionId {\n  data: bigint;\n\n  get __connection_id__(): bigint {\n    return this.data;\n  }\n\n  /**\n   * Creates a new `ConnectionId`.\n   */\n  constructor(data: bigint) {\n    this.data = data;\n  }\n\n  isZero(): boolean {\n    return this.data === BigInt(0);\n  }\n\n  static nullIfZero(addr: ConnectionId): ConnectionId | null {\n    if (addr.isZero()) {\n      return null;\n    } else {\n      return addr;\n    }\n  }\n\n  static random(): ConnectionId {\n    function randomU8(): number {\n      return Math.floor(Math.random() * 0xff);\n    }\n    let result = BigInt(0);\n    for (let i = 0; i < 16; i++) {\n      result = (result << BigInt(8)) | BigInt(randomU8());\n    }\n    return new ConnectionId(result);\n  }\n\n  /**\n   * Compare two connection IDs for equality.\n   */\n  isEqual(other: ConnectionId): boolean {\n    return this.data == other.data;\n  }\n\n  /**\n   * Print the connection ID as a hexadecimal string.\n   */\n  toHexString(): string {\n    return u128ToHexString(this.data);\n  }\n\n  /**\n   * Convert the connection ID to a Uint8Array.\n   */\n  toUint8Array(): Uint8Array {\n    return u128ToUint8Array(this.data);\n  }\n\n  /**\n   * Parse a connection ID from a hexadecimal string.\n   */\n  static fromString(str: string): ConnectionId {\n    return new ConnectionId(hexStringToU128(str));\n  }\n\n  static fromStringOrNull(str: string): ConnectionId | null {\n    let addr = ConnectionId.fromString(str);\n    if (addr.isZero()) {\n      return null;\n    } else {\n      return addr;\n    }\n  }\n}\n","/**\n * A difference between two points in time, represented as a number of microseconds.\n */\nexport class TimeDuration {\n  __time_duration_micros__: bigint;\n\n  private static MICROS_PER_MILLIS: bigint = 1000n;\n\n  get micros(): bigint {\n    return this.__time_duration_micros__;\n  }\n\n  get millis(): number {\n    return Number(this.micros / TimeDuration.MICROS_PER_MILLIS);\n  }\n\n  constructor(micros: bigint) {\n    this.__time_duration_micros__ = micros;\n  }\n\n  static fromMillis(millis: number): TimeDuration {\n    return new TimeDuration(BigInt(millis) * TimeDuration.MICROS_PER_MILLIS);\n  }\n}\n","/**\n * A point in time, represented as a number of microseconds since the Unix epoch.\n */\nexport class Timestamp {\n  __timestamp_micros_since_unix_epoch__: bigint;\n\n  private static MICROS_PER_MILLIS: bigint = 1000n;\n\n  get microsSinceUnixEpoch(): bigint {\n    return this.__timestamp_micros_since_unix_epoch__;\n  }\n\n  constructor(micros: bigint) {\n    this.__timestamp_micros_since_unix_epoch__ = micros;\n  }\n\n  /**\n   * The Unix epoch, the midnight at the beginning of January 1, 1970, UTC.\n   */\n  static UNIX_EPOCH: Timestamp = new Timestamp(0n);\n\n  /**\n   * Get a `Timestamp` representing the execution environment's belief of the current moment in time.\n   */\n  static now(): Timestamp {\n    return Timestamp.fromDate(new Date());\n  }\n\n  /**\n   * Get a `Timestamp` representing the same point in time as `date`.\n   */\n  static fromDate(date: Date): Timestamp {\n    const millis = date.getTime();\n    const micros = BigInt(millis) * Timestamp.MICROS_PER_MILLIS;\n    return new Timestamp(micros);\n  }\n\n  /**\n   * Get a `Date` representing approximately the same point in time as `this`.\n   *\n   * This method truncates to millisecond precision,\n   * and throws `RangeError` if the `Timestamp` is outside the range representable as a `Date`.\n   */\n  toDate(): Date {\n    const micros = this.__timestamp_micros_since_unix_epoch__;\n    const millis = micros / Timestamp.MICROS_PER_MILLIS;\n    if (\n      millis > BigInt(Number.MAX_SAFE_INTEGER) ||\n      millis < BigInt(Number.MIN_SAFE_INTEGER)\n    ) {\n      throw new RangeError(\n        \"Timestamp is outside of the representable range of JS's Date\"\n      );\n    }\n    return new Date(Number(millis));\n  }\n}\n","import BinaryReader from './binary_reader';\nimport BinaryWriter from './binary_writer';\nimport { hexStringToU256, u256ToHexString, u256ToUint8Array } from './utils';\n\n/**\n * A unique identifier for a user connected to a database.\n */\nexport class Identity {\n  data: bigint;\n\n  get __identity__(): bigint {\n    return this.data;\n  }\n\n  /**\n   * Creates a new `Identity`.\n   *\n   * `data` can be a hexadecimal string or a `bigint`.\n   */\n  constructor(data: string | bigint) {\n    // we get a JSON with __identity__ when getting a token with a JSON API\n    // and an bigint when using BSATN\n    this.data = typeof data === 'string' ? hexStringToU256(data) : data;\n  }\n\n  /**\n   * Compare two identities for equality.\n   */\n  isEqual(other: Identity): boolean {\n    return this.toHexString() === other.toHexString();\n  }\n\n  /**\n   * Print the identity as a hexadecimal string.\n   */\n  toHexString(): string {\n    return u256ToHexString(this.data);\n  }\n\n  /**\n   * Convert the address to a Uint8Array.\n   */\n  toUint8Array(): Uint8Array {\n    return u256ToUint8Array(this.data);\n  }\n\n  /**\n   * Parse an Identity from a hexadecimal string.\n   */\n  static fromString(str: string): Identity {\n    return new Identity(str);\n  }\n}\n","import { AlgebraicType, SumTypeVariant } from './algebraic_type';\nimport type { AlgebraicValue } from './algebraic_value';\n\nexport namespace ScheduleAt {\n  export function getAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant('Interval', AlgebraicType.createU64Type()),\n      new SumTypeVariant('Time', AlgebraicType.createU64Type()),\n    ]);\n  }\n\n  export function serialize(value: ScheduleAt): object {\n    switch (value.tag) {\n      case 'Interval':\n        return { Interval: value.value };\n      case 'Time':\n        return { Time: value.value };\n      default:\n        throw 'unreachable';\n    }\n  }\n\n  export type Interval = { tag: 'Interval'; value: BigInt };\n  export const Interval = (value: BigInt): Interval => ({\n    tag: 'Interval',\n    value,\n  });\n  export type Time = { tag: 'Time'; value: BigInt };\n  export const Time = (value: BigInt): Time => ({ tag: 'Time', value });\n\n  export function fromValue(value: AlgebraicValue): ScheduleAt {\n    let sumValue = value.asSumValue();\n    switch (sumValue.tag) {\n      case 0:\n        return { tag: 'Interval', value: sumValue.value.asBigInt() };\n      case 1:\n        return { tag: 'Time', value: sumValue.value.asBigInt() };\n      default:\n        throw 'unreachable';\n    }\n  }\n}\n\nexport type ScheduleAt = ScheduleAt.Interval | ScheduleAt.Time;\nexport default ScheduleAt;\n","import { TimeDuration } from './time_duration';\nimport { Timestamp } from './timestamp';\nimport { ConnectionId } from './connection_id';\nimport type BinaryReader from './binary_reader';\nimport type BinaryWriter from './binary_writer';\nimport { Identity } from './identity';\nimport ScheduleAt from './schedule_at';\n\n/**\n * A variant of a sum type.\n *\n * NOTE: Each element has an implicit element tag based on its order.\n * Uniquely identifies an element similarly to protobuf tags.\n */\nexport class SumTypeVariant {\n  name: string;\n  algebraicType: AlgebraicType;\n\n  constructor(name: string, algebraicType: AlgebraicType) {\n    this.name = name;\n    this.algebraicType = algebraicType;\n  }\n}\n\n/**\n * Unlike most languages, sums in SATS are *[structural]* and not nominal.\n * When checking whether two nominal types are the same,\n * their names and/or declaration sites (e.g., module / namespace) are considered.\n * Meanwhile, a structural type system would only check the structure of the type itself,\n * e.g., the names of its variants and their inner data types in the case of a sum.\n *\n * This is also known as a discriminated union (implementation) or disjoint union.\n * Another name is [coproduct (category theory)](https://ncatlab.org/nlab/show/coproduct).\n *\n * These structures are known as sum types because the number of possible values a sum\n * ```ignore\n * { N_0(T_0), N_1(T_1), ..., N_n(T_n) }\n * ```\n * is:\n * ```ignore\n * Σ (i ∈ 0..n). values(T_i)\n * ```\n * so for example, `values({ A(U64), B(Bool) }) = values(U64) + values(Bool)`.\n *\n * See also: https://ncatlab.org/nlab/show/sum+type.\n *\n * [structural]: https://en.wikipedia.org/wiki/Structural_type_system\n */\nexport class SumType {\n  variants: SumTypeVariant[];\n\n  constructor(variants: SumTypeVariant[]) {\n    this.variants = variants;\n  }\n\n  serialize = (writer: BinaryWriter, value: any): void => {\n    // In TypeScript we handle Option values as a special case\n    // we don't represent the some and none variants, but instead\n    // we represent the value directly.\n    if (\n      this.variants.length == 2 &&\n      this.variants[0].name === 'some' &&\n      this.variants[1].name === 'none'\n    ) {\n      if (value) {\n        writer.writeByte(0);\n        this.variants[0].algebraicType.serialize(writer, value);\n      } else {\n        writer.writeByte(1);\n      }\n    } else {\n      let variant = value['tag'];\n      const index = this.variants.findIndex(v => v.name === variant);\n      if (index < 0) {\n        throw `Can't serialize a sum type, couldn't find ${value.tag} tag`;\n      }\n      writer.writeU8(index);\n      this.variants[index].algebraicType.serialize(writer, value['value']);\n    }\n  };\n\n  deserialize = (reader: BinaryReader): any => {\n    let tag = reader.readU8();\n    // In TypeScript we handle Option values as a special case\n    // we don't represent the some and none variants, but instead\n    // we represent the value directly.\n    if (\n      this.variants.length == 2 &&\n      this.variants[0].name === 'some' &&\n      this.variants[1].name === 'none'\n    ) {\n      if (tag === 0) {\n        return this.variants[0].algebraicType.deserialize(reader);\n      } else if (tag === 1) {\n        return undefined;\n      } else {\n        throw `Can't deserialize an option type, couldn't find ${tag} tag`;\n      }\n    } else {\n      let variant = this.variants[tag];\n      let value = variant.algebraicType.deserialize(reader);\n      return { tag: variant.name, value };\n    }\n  };\n}\n\n/**\n * A factor / element of a product type.\n *\n * An element consist of an optional name and a type.\n *\n * NOTE: Each element has an implicit element tag based on its order.\n * Uniquely identifies an element similarly to protobuf tags.\n */\nexport class ProductTypeElement {\n  name: string;\n  algebraicType: AlgebraicType;\n\n  constructor(name: string, algebraicType: AlgebraicType) {\n    this.name = name;\n    this.algebraicType = algebraicType;\n  }\n}\n\n/**\n * A structural product type  of the factors given by `elements`.\n *\n * This is also known as `struct` and `tuple` in many languages,\n * but note that unlike most languages, products in SATs are *[structural]* and not nominal.\n * When checking whether two nominal types are the same,\n * their names and/or declaration sites (e.g., module / namespace) are considered.\n * Meanwhile, a structural type system would only check the structure of the type itself,\n * e.g., the names of its fields and their types in the case of a record.\n * The name \"product\" comes from category theory.\n *\n * See also: https://ncatlab.org/nlab/show/product+type.\n *\n * These structures are known as product types because the number of possible values in product\n * ```ignore\n * { N_0: T_0, N_1: T_1, ..., N_n: T_n }\n * ```\n * is:\n * ```ignore\n * Π (i ∈ 0..n). values(T_i)\n * ```\n * so for example, `values({ A: U64, B: Bool }) = values(U64) * values(Bool)`.\n *\n * [structural]: https://en.wikipedia.org/wiki/Structural_type_system\n */\nexport class ProductType {\n  elements: ProductTypeElement[];\n\n  constructor(elements: ProductTypeElement[]) {\n    this.elements = elements;\n  }\n\n  isEmpty(): boolean {\n    return this.elements.length === 0;\n  }\n\n  serialize = (writer: BinaryWriter, value: object): void => {\n    for (let element of this.elements) {\n      element.algebraicType.serialize(writer, value[element.name]);\n    }\n  };\n\n  deserialize = (reader: BinaryReader): any => {\n    let result: { [key: string]: any } = {};\n    if (this.elements.length === 1) {\n      if (this.elements[0].name === '__time_duration_micros__') {\n        return new TimeDuration(reader.readI64());\n      }\n\n      if (this.elements[0].name === '__timestamp_micros_since_unix_epoch__') {\n        return new Timestamp(reader.readI64());\n      }\n\n      if (this.elements[0].name === '__identity__') {\n        return new Identity(reader.readU256());\n      }\n\n      if (this.elements[0].name === '__connection_id__') {\n        return new ConnectionId(reader.readU128());\n      }\n    }\n\n    for (let element of this.elements) {\n      result[element.name] = element.algebraicType.deserialize(reader);\n    }\n    return result;\n  };\n}\n\n/* A map type from keys of type `keyType` to values of type `valueType`. */\nexport class MapType {\n  keyType: AlgebraicType;\n  valueType: AlgebraicType;\n\n  constructor(keyType: AlgebraicType, valueType: AlgebraicType) {\n    this.keyType = keyType;\n    this.valueType = valueType;\n  }\n}\n\ntype ArrayBaseType = AlgebraicType;\ntype TypeRef = null;\ntype None = null;\nexport type EnumLabel = { label: string };\n\ntype AnyType =\n  | ProductType\n  | SumType\n  | ArrayBaseType\n  | MapType\n  | EnumLabel\n  | TypeRef\n  | None;\n\n/**\n * The SpacetimeDB Algebraic Type System (SATS) is a structural type system in\n * which a nominal type system can be constructed.\n *\n * The type system unifies the concepts sum types, product types, and built-in\n * primitive types into a single type system.\n */\nexport class AlgebraicType {\n  type!: Type;\n  type_?: AnyType;\n\n  #setter(type: Type, payload: AnyType | undefined) {\n    this.type_ = payload;\n    this.type = payload === undefined ? Type.None : type;\n  }\n\n  get product(): ProductType {\n    if (this.type !== Type.ProductType) {\n      throw 'product type was requested, but the type is not ProductType';\n    }\n    return this.type_ as ProductType;\n  }\n\n  set product(value: ProductType | undefined) {\n    this.#setter(Type.ProductType, value);\n  }\n\n  get sum(): SumType {\n    if (this.type !== Type.SumType) {\n      throw 'sum type was requested, but the type is not SumType';\n    }\n    return this.type_ as SumType;\n  }\n  set sum(value: SumType | undefined) {\n    this.#setter(Type.SumType, value);\n  }\n\n  get array(): ArrayBaseType {\n    if (this.type !== Type.ArrayType) {\n      throw 'array type was requested, but the type is not ArrayType';\n    }\n    return this.type_ as ArrayBaseType;\n  }\n  set array(value: ArrayBaseType | undefined) {\n    this.#setter(Type.ArrayType, value);\n  }\n\n  get map(): MapType {\n    if (this.type !== Type.MapType) {\n      throw 'map type was requested, but the type is not MapType';\n    }\n    return this.type_ as MapType;\n  }\n  set map(value: MapType | undefined) {\n    this.#setter(Type.MapType, value);\n  }\n\n  static #createType(type: Type, payload: AnyType | undefined): AlgebraicType {\n    let at = new AlgebraicType();\n    at.#setter(type, payload);\n    return at;\n  }\n\n  static createProductType(elements: ProductTypeElement[]): AlgebraicType {\n    return this.#createType(Type.ProductType, new ProductType(elements));\n  }\n\n  static createSumType(variants: SumTypeVariant[]): AlgebraicType {\n    return this.#createType(Type.SumType, new SumType(variants));\n  }\n\n  static createArrayType(elementType: AlgebraicType): AlgebraicType {\n    return this.#createType(Type.ArrayType, elementType);\n  }\n\n  static createMapType(key: AlgebraicType, val: AlgebraicType): AlgebraicType {\n    return this.#createType(Type.MapType, new MapType(key, val));\n  }\n\n  static createBoolType(): AlgebraicType {\n    return this.#createType(Type.Bool, null);\n  }\n  static createI8Type(): AlgebraicType {\n    return this.#createType(Type.I8, null);\n  }\n  static createU8Type(): AlgebraicType {\n    return this.#createType(Type.U8, null);\n  }\n  static createI16Type(): AlgebraicType {\n    return this.#createType(Type.I16, null);\n  }\n  static createU16Type(): AlgebraicType {\n    return this.#createType(Type.U16, null);\n  }\n  static createI32Type(): AlgebraicType {\n    return this.#createType(Type.I32, null);\n  }\n  static createU32Type(): AlgebraicType {\n    return this.#createType(Type.U32, null);\n  }\n  static createI64Type(): AlgebraicType {\n    return this.#createType(Type.I64, null);\n  }\n  static createU64Type(): AlgebraicType {\n    return this.#createType(Type.U64, null);\n  }\n  static createI128Type(): AlgebraicType {\n    return this.#createType(Type.I128, null);\n  }\n  static createU128Type(): AlgebraicType {\n    return this.#createType(Type.U128, null);\n  }\n  static createI256Type(): AlgebraicType {\n    return this.#createType(Type.I256, null);\n  }\n  static createU256Type(): AlgebraicType {\n    return this.#createType(Type.U256, null);\n  }\n  static createF32Type(): AlgebraicType {\n    return this.#createType(Type.F32, null);\n  }\n  static createF64Type(): AlgebraicType {\n    return this.#createType(Type.F64, null);\n  }\n  static createStringType(): AlgebraicType {\n    return this.#createType(Type.String, null);\n  }\n  static createBytesType(): AlgebraicType {\n    return this.createArrayType(this.createU8Type());\n  }\n  static createOptionType(innerType: AlgebraicType): AlgebraicType {\n    return this.createSumType([\n      new SumTypeVariant('some', innerType),\n      new SumTypeVariant('none', this.createProductType([])),\n    ]);\n  }\n  static createIdentityType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__identity__', this.createU256Type()),\n    ]);\n  }\n\n  static createConnectionIdType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__connection_id__', this.createU128Type()),\n    ]);\n  }\n\n  static createScheduleAtType(): AlgebraicType {\n    return ScheduleAt.getAlgebraicType();\n  }\n\n  static createTimestampType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement(\n        '__timestamp_micros_since_unix_epoch__',\n        this.createI64Type()\n      ),\n    ]);\n  }\n\n  static createTimeDurationType(): AlgebraicType {\n    return this.createProductType([\n      new ProductTypeElement('__time_duration_micros__', this.createI64Type()),\n    ]);\n  }\n\n  isProductType(): boolean {\n    return this.type === Type.ProductType;\n  }\n\n  isSumType(): boolean {\n    return this.type === Type.SumType;\n  }\n\n  isArrayType(): boolean {\n    return this.type === Type.ArrayType;\n  }\n\n  isMapType(): boolean {\n    return this.type === Type.MapType;\n  }\n\n  #isBytes(): boolean {\n    return this.isArrayType() && this.array.type == Type.U8;\n  }\n\n  #isBytesNewtype(tag: string): boolean {\n    return (\n      this.isProductType() &&\n      this.product.elements.length === 1 &&\n      (this.product.elements[0].algebraicType.type == Type.U128 ||\n        this.product.elements[0].algebraicType.type == Type.U256) &&\n      this.product.elements[0].name === tag\n    );\n  }\n\n  #isI64Newtype(tag: string): boolean {\n    return (\n      this.isProductType() &&\n      this.product.elements.length === 1 &&\n      this.product.elements[0].algebraicType.type === Type.I64 &&\n      this.product.elements[0].name === tag\n    );\n  }\n\n  isIdentity(): boolean {\n    return this.#isBytesNewtype('__identity__');\n  }\n\n  isConnectionId(): boolean {\n    return this.#isBytesNewtype('__connection_id__');\n  }\n\n  isScheduleAt(): boolean {\n    return (\n      this.isSumType() &&\n      this.sum.variants.length === 2 &&\n      this.sum.variants[0].name === 'Interval' &&\n      this.sum.variants[0].algebraicType.type === Type.U64 &&\n      this.sum.variants[1].name === 'Time' &&\n      this.sum.variants[1].algebraicType.type === Type.U64\n    );\n  }\n\n  isTimestamp(): boolean {\n    return this.#isI64Newtype('__timestamp_micros_since_unix_epoch__');\n  }\n\n  isTimeDuration(): boolean {\n    return this.#isI64Newtype('__time_duration_micros__');\n  }\n\n  serialize(writer: BinaryWriter, value: any): void {\n    switch (this.type) {\n      case Type.ProductType:\n        this.product.serialize(writer, value);\n        break;\n      case Type.SumType:\n        this.sum.serialize(writer, value);\n        break;\n      case Type.ArrayType:\n        if (this.#isBytes()) {\n          writer.writeUInt8Array(value);\n        } else {\n          const elemType = this.array;\n          writer.writeU32(value.length);\n          for (let elem of value) {\n            elemType.serialize(writer, elem);\n          }\n        }\n        break;\n      case Type.MapType:\n        throw new Error('not implemented');\n      case Type.Bool:\n        writer.writeBool(value);\n        break;\n      case Type.I8:\n        writer.writeI8(value);\n        break;\n      case Type.U8:\n        writer.writeU8(value);\n        break;\n      case Type.I16:\n        writer.writeI16(value);\n        break;\n      case Type.U16:\n        writer.writeU16(value);\n        break;\n      case Type.I32:\n        writer.writeI32(value);\n        break;\n      case Type.U32:\n        writer.writeU32(value);\n        break;\n      case Type.I64:\n        writer.writeI64(value);\n        break;\n      case Type.U64:\n        writer.writeU64(value);\n        break;\n      case Type.I128:\n        writer.writeI128(value);\n        break;\n      case Type.U128:\n        writer.writeU128(value);\n        break;\n      case Type.I256:\n        writer.writeI256(value);\n        break;\n      case Type.U256:\n        writer.writeU256(value);\n        break;\n      case Type.F32:\n        writer.writeF32(value);\n        break;\n      case Type.F64:\n        writer.writeF64(value);\n        break;\n      case Type.String:\n        writer.writeString(value);\n        break;\n      default:\n        throw new Error(`not implemented, ${this.type}`);\n    }\n  }\n\n  deserialize(reader: BinaryReader): any {\n    switch (this.type) {\n      case Type.ProductType:\n        return this.product.deserialize(reader);\n      case Type.SumType:\n        return this.sum.deserialize(reader);\n      case Type.ArrayType:\n        if (this.#isBytes()) {\n          return reader.readUInt8Array();\n        } else {\n          const elemType = this.array;\n          const length = reader.readU32();\n          let result: any[] = [];\n          for (let i = 0; i < length; i++) {\n            result.push(elemType.deserialize(reader));\n          }\n          return result;\n        }\n      case Type.MapType:\n        // TODO: MapType is being removed\n        throw new Error('not implemented');\n      case Type.Bool:\n        return reader.readBool();\n      case Type.I8:\n        return reader.readI8();\n      case Type.U8:\n        return reader.readU8();\n      case Type.I16:\n        return reader.readI16();\n      case Type.U16:\n        return reader.readU16();\n      case Type.I32:\n        return reader.readI32();\n      case Type.U32:\n        return reader.readU32();\n      case Type.I64:\n        return reader.readI64();\n      case Type.U64:\n        return reader.readU64();\n      case Type.I128:\n        return reader.readI128();\n      case Type.U128:\n        return reader.readU128();\n      case Type.U256:\n        return reader.readU256();\n      case Type.F32:\n        return reader.readF32();\n      case Type.F64:\n        return reader.readF64();\n      case Type.String:\n        return reader.readString();\n      default:\n        throw new Error(`not implemented, ${this.type}`);\n    }\n  }\n}\n\nexport namespace AlgebraicType {\n  export enum Type {\n    SumType = 'SumType',\n    ProductType = 'ProductType',\n    ArrayType = 'ArrayType',\n    MapType = 'MapType',\n    Bool = 'Bool',\n    I8 = 'I8',\n    U8 = 'U8',\n    I16 = 'I16',\n    U16 = 'U16',\n    I32 = 'I32',\n    U32 = 'U32',\n    I64 = 'I64',\n    U64 = 'U64',\n    I128 = 'I128',\n    U128 = 'U128',\n    I256 = 'I256',\n    U256 = 'U256',\n    F32 = 'F32',\n    F64 = 'F64',\n    /** UTF-8 encoded */\n    String = 'String',\n    None = 'None',\n  }\n}\n\n// No idea why but in order to have a local alias for both of these\n// need to be present\ntype Type = AlgebraicType.Type;\nlet Type: typeof AlgebraicType.Type = AlgebraicType.Type;\n","import { ConnectionId } from './connection_id';\nimport { AlgebraicType, ProductType, SumType } from './algebraic_type';\nimport BinaryReader from './binary_reader';\nimport { Identity } from './identity';\nimport { ScheduleAt } from './schedule_at';\n\nexport interface ReducerArgsAdapter {\n  next: () => ValueAdapter;\n}\n\nexport class BinaryReducerArgsAdapter {\n  adapter: BinaryAdapter;\n\n  constructor(adapter: BinaryAdapter) {\n    this.adapter = adapter;\n  }\n\n  next(): ValueAdapter {\n    return this.adapter;\n  }\n}\n\n/** Defines the interface for deserialize `AlgebraicValue`s*/\nexport interface ValueAdapter {\n  readUInt8Array: () => Uint8Array;\n  readArray: (type: AlgebraicType) => AlgebraicValue[];\n  readMap: (keyType: AlgebraicType, valueType: AlgebraicType) => MapValue;\n  readString: () => string;\n  readSum: (type: SumType) => SumValue;\n  readProduct: (type: ProductType) => ProductValue;\n\n  readBool: () => boolean;\n  readByte: () => number;\n  readI8: () => number;\n  readU8: () => number;\n  readI16: () => number;\n  readU16: () => number;\n  readI32: () => number;\n  readU32: () => number;\n  readI64: () => bigint;\n  readU64: () => bigint;\n  readU128: () => bigint;\n  readI128: () => bigint;\n  readF32: () => number;\n  readF64: () => number;\n\n  callMethod<K extends keyof ValueAdapter>(methodName: K): any;\n}\n\nexport class BinaryAdapter implements ValueAdapter {\n  #reader: BinaryReader;\n\n  constructor(reader: BinaryReader) {\n    this.#reader = reader;\n  }\n\n  callMethod<K extends keyof ValueAdapter>(methodName: K): any {\n    return (this[methodName] as Function)();\n  }\n\n  readUInt8Array(): Uint8Array {\n    return this.#reader.readUInt8Array();\n  }\n\n  readArray(type: AlgebraicType): AlgebraicValue[] {\n    const length = this.#reader.readU32();\n    let result: AlgebraicValue[] = [];\n    for (let i = 0; i < length; i++) {\n      result.push(AlgebraicValue.deserialize(type, this));\n    }\n\n    return result;\n  }\n\n  readMap(keyType: AlgebraicType, valueType: AlgebraicType): MapValue {\n    const mapLength = this.#reader.readU32();\n    let result: MapValue = new Map();\n    for (let i = 0; i < mapLength; i++) {\n      const key = AlgebraicValue.deserialize(keyType, this);\n      const value = AlgebraicValue.deserialize(valueType, this);\n      result.set(key, value);\n    }\n\n    return result;\n  }\n\n  readString(): string {\n    return this.#reader.readString();\n  }\n\n  readSum(type: SumType): SumValue {\n    let tag = this.#reader.readByte();\n    let sumValue = AlgebraicValue.deserialize(\n      type.variants[tag].algebraicType,\n      this\n    );\n    return new SumValue(tag, sumValue);\n  }\n\n  readProduct(type: ProductType): ProductValue {\n    let elements: AlgebraicValue[] = [];\n\n    for (let element of type.elements) {\n      elements.push(AlgebraicValue.deserialize(element.algebraicType, this));\n    }\n    return new ProductValue(elements);\n  }\n\n  readBool(): boolean {\n    return this.#reader.readBool();\n  }\n  readByte(): number {\n    return this.#reader.readByte();\n  }\n  readI8(): number {\n    return this.#reader.readI8();\n  }\n  readU8(): number {\n    return this.#reader.readU8();\n  }\n  readI16(): number {\n    return this.#reader.readI16();\n  }\n  readU16(): number {\n    return this.#reader.readU16();\n  }\n  readI32(): number {\n    return this.#reader.readI32();\n  }\n  readU32(): number {\n    return this.#reader.readU32();\n  }\n  readI64(): bigint {\n    return this.#reader.readI64();\n  }\n  readU64(): bigint {\n    return this.#reader.readU64();\n  }\n  readU128(): bigint {\n    return this.#reader.readU128();\n  }\n  readI128(): bigint {\n    return this.#reader.readI128();\n  }\n  readF32(): number {\n    return this.#reader.readF32();\n  }\n  readF64(): number {\n    return this.#reader.readF64();\n  }\n}\n\n/** A value of a sum type choosing a specific variant of the type. */\nexport class SumValue {\n  /** A tag representing the choice of one variant of the sum type's variants. */\n  tag: number;\n  /**\n   * Given a variant `Var(Ty)` in a sum type `{ Var(Ty), ... }`,\n   * this provides the `value` for `Ty`.\n   */\n  value: AlgebraicValue;\n\n  constructor(tag: number, value: AlgebraicValue) {\n    this.tag = tag;\n    this.value = value;\n  }\n\n  static deserialize(type: SumType, adapter: ValueAdapter): SumValue {\n    return adapter.readSum(type);\n  }\n}\n\n/**\n * A product value is made of a list of\n * \"elements\" / \"fields\" / \"factors\" of other `AlgebraicValue`s.\n *\n * The type of product value is a [product type](`ProductType`).\n */\nexport class ProductValue {\n  elements: AlgebraicValue[];\n\n  constructor(elements: AlgebraicValue[]) {\n    this.elements = elements;\n  }\n\n  static deserialize(type: ProductType, adapter: ValueAdapter): ProductValue {\n    return adapter.readProduct(type);\n  }\n}\n\nexport type MapValue = Map<AlgebraicValue, AlgebraicValue>;\n\ntype AnyValue =\n  | SumValue\n  | ProductValue\n  | AlgebraicValue[]\n  | Uint8Array\n  | MapValue\n  | string\n  | boolean\n  | number\n  | bigint;\n\n/** A value in SATS. */\nexport class AlgebraicValue {\n  value: AnyValue;\n\n  constructor(value: AnyValue | undefined) {\n    if (value === undefined) {\n      // TODO: possibly get rid of it\n      throw 'value is undefined';\n    }\n    this.value = value;\n  }\n\n  callMethod<K extends keyof AlgebraicValue>(methodName: K): any {\n    return (this[methodName] as Function)();\n  }\n\n  static deserialize(\n    type: AlgebraicType,\n    adapter: ValueAdapter\n  ): AlgebraicValue {\n    switch (type.type) {\n      case AlgebraicType.Type.ProductType:\n        return new this(ProductValue.deserialize(type.product, adapter));\n      case AlgebraicType.Type.SumType:\n        return new this(SumValue.deserialize(type.sum, adapter));\n      case AlgebraicType.Type.ArrayType:\n        let elemType = type.array;\n        if (elemType.type === AlgebraicType.Type.U8) {\n          return new this(adapter.readUInt8Array());\n        } else {\n          return new this(adapter.readArray(elemType));\n        }\n      case AlgebraicType.Type.MapType:\n        let mapType = type.map;\n        return new this(adapter.readMap(mapType.keyType, mapType.valueType));\n      case AlgebraicType.Type.Bool:\n        return new this(adapter.readBool());\n      case AlgebraicType.Type.I8:\n        return new this(adapter.readI8());\n      case AlgebraicType.Type.U8:\n        return new this(adapter.readU8());\n      case AlgebraicType.Type.I16:\n        return new this(adapter.readI16());\n      case AlgebraicType.Type.U16:\n        return new this(adapter.readU16());\n      case AlgebraicType.Type.I32:\n        return new this(adapter.readI32());\n      case AlgebraicType.Type.U32:\n        return new this(adapter.readU32());\n      case AlgebraicType.Type.I64:\n        return new this(adapter.readI64());\n      case AlgebraicType.Type.U64:\n        return new this(adapter.readU64());\n      case AlgebraicType.Type.I128:\n        return new this(adapter.readI128());\n      case AlgebraicType.Type.U128:\n        return new this(adapter.readU128());\n      case AlgebraicType.Type.String:\n        return new this(adapter.readString());\n      default:\n        throw new Error(`not implemented, ${type.type}`);\n    }\n  }\n\n  // TODO: all of the following methods should actually check the type of `self.value`\n  // and throw if it does not match.\n\n  asProductValue(): ProductValue {\n    return this.value as ProductValue;\n  }\n\n  asField(index: number): AlgebraicValue {\n    return this.asProductValue().elements[index];\n  }\n\n  asSumValue(): SumValue {\n    return this.value as SumValue;\n  }\n\n  asArray(): AlgebraicValue[] {\n    return this.value as AlgebraicValue[];\n  }\n\n  asMap(): MapValue {\n    return this.value as MapValue;\n  }\n\n  asString(): string {\n    return this.value as string;\n  }\n\n  asBoolean(): boolean {\n    return this.value as boolean;\n  }\n\n  asNumber(): number {\n    return this.value as number;\n  }\n\n  asBytes(): Uint8Array {\n    return this.value as Uint8Array;\n  }\n\n  asBigInt(): bigint {\n    return this.value as bigint;\n  }\n\n  asIdentity(): Identity {\n    return new Identity(this.asField(0).asBigInt());\n  }\n\n  asConnectionId(): ConnectionId {\n    return new ConnectionId(this.asField(0).asBigInt());\n  }\n\n  asScheduleAt(): ScheduleAt {\n    return ScheduleAt.fromValue(this);\n  }\n}\n\nexport interface ParseableType<T> {\n  deserialize: (reader: BinaryReader) => T;\n}\n\nexport function parseValue<T>(ty: ParseableType<T>, src: Uint8Array): T {\n  const reader = new BinaryReader(src);\n  return ty.deserialize(reader);\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\n// A namespace for generated variants and helper functions.\nexport namespace RowSizeHint {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type FixedSize = { tag: 'FixedSize'; value: number };\n  export type RowOffsets = { tag: 'RowOffsets'; value: bigint[] };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const FixedSize = (value: number): RowSizeHint => ({\n    tag: 'FixedSize',\n    value,\n  });\n  export const RowOffsets = (value: bigint[]): RowSizeHint => ({\n    tag: 'RowOffsets',\n    value,\n  });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant('FixedSize', AlgebraicType.createU16Type()),\n      new SumTypeVariant(\n        'RowOffsets',\n        AlgebraicType.createArrayType(AlgebraicType.createU64Type())\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: RowSizeHint): void {\n    RowSizeHint.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): RowSizeHint {\n    return RowSizeHint.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `RowSizeHint`.\nexport type RowSizeHint = RowSizeHint.FixedSize | RowSizeHint.RowOffsets;\n\nexport default RowSizeHint;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { RowSizeHint as __RowSizeHint } from './row_size_hint_type';\n\nexport type BsatnRowList = {\n  sizeHint: __RowSizeHint;\n  rowsData: Uint8Array;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace BsatnRowList {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'sizeHint',\n        __RowSizeHint.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'rowsData',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: BsatnRowList): void {\n    BsatnRowList.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): BsatnRowList {\n    return BsatnRowList.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type CallReducer = {\n  reducer: string;\n  args: Uint8Array;\n  requestId: number;\n  flags: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace CallReducer {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('reducer', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'args',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('flags', AlgebraicType.createU8Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: CallReducer): void {\n    CallReducer.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): CallReducer {\n    return CallReducer.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type Subscribe = {\n  queryStrings: string[];\n  requestId: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace Subscribe {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'queryStrings',\n        AlgebraicType.createArrayType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: Subscribe): void {\n    Subscribe.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): Subscribe {\n    return Subscribe.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type OneOffQuery = {\n  messageId: Uint8Array;\n  queryString: string;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffQuery {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'messageId',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('queryString', AlgebraicType.createStringType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: OneOffQuery): void {\n    OneOffQuery.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffQuery {\n    return OneOffQuery.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type QueryId = {\n  id: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace QueryId {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('id', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: QueryId): void {\n    QueryId.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): QueryId {\n    return QueryId.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type SubscribeSingle = {\n  query: string;\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeSingle {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('query', AlgebraicType.createStringType()),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeSingle\n  ): void {\n    SubscribeSingle.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeSingle {\n    return SubscribeSingle.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type SubscribeMulti = {\n  queryStrings: string[];\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeMulti {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'queryStrings',\n        AlgebraicType.createArrayType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: SubscribeMulti): void {\n    SubscribeMulti.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeMulti {\n    return SubscribeMulti.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type Unsubscribe = {\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace Unsubscribe {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: Unsubscribe): void {\n    Unsubscribe.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): Unsubscribe {\n    return Unsubscribe.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\n\nexport type UnsubscribeMulti = {\n  requestId: number;\n  queryId: __QueryId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeMulti {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeMulti\n  ): void {\n    UnsubscribeMulti.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeMulti {\n    return UnsubscribeMulti.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { CallReducer as __CallReducer } from './call_reducer_type';\nimport { Subscribe as __Subscribe } from './subscribe_type';\nimport { OneOffQuery as __OneOffQuery } from './one_off_query_type';\nimport { SubscribeSingle as __SubscribeSingle } from './subscribe_single_type';\nimport { SubscribeMulti as __SubscribeMulti } from './subscribe_multi_type';\nimport { Unsubscribe as __Unsubscribe } from './unsubscribe_type';\nimport { UnsubscribeMulti as __UnsubscribeMulti } from './unsubscribe_multi_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace ClientMessage {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type CallReducer = { tag: 'CallReducer'; value: __CallReducer };\n  export type Subscribe = { tag: 'Subscribe'; value: __Subscribe };\n  export type OneOffQuery = { tag: 'OneOffQuery'; value: __OneOffQuery };\n  export type SubscribeSingle = {\n    tag: 'SubscribeSingle';\n    value: __SubscribeSingle;\n  };\n  export type SubscribeMulti = {\n    tag: 'SubscribeMulti';\n    value: __SubscribeMulti;\n  };\n  export type Unsubscribe = { tag: 'Unsubscribe'; value: __Unsubscribe };\n  export type UnsubscribeMulti = {\n    tag: 'UnsubscribeMulti';\n    value: __UnsubscribeMulti;\n  };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const CallReducer = (value: __CallReducer): ClientMessage => ({\n    tag: 'CallReducer',\n    value,\n  });\n  export const Subscribe = (value: __Subscribe): ClientMessage => ({\n    tag: 'Subscribe',\n    value,\n  });\n  export const OneOffQuery = (value: __OneOffQuery): ClientMessage => ({\n    tag: 'OneOffQuery',\n    value,\n  });\n  export const SubscribeSingle = (value: __SubscribeSingle): ClientMessage => ({\n    tag: 'SubscribeSingle',\n    value,\n  });\n  export const SubscribeMulti = (value: __SubscribeMulti): ClientMessage => ({\n    tag: 'SubscribeMulti',\n    value,\n  });\n  export const Unsubscribe = (value: __Unsubscribe): ClientMessage => ({\n    tag: 'Unsubscribe',\n    value,\n  });\n  export const UnsubscribeMulti = (\n    value: __UnsubscribeMulti\n  ): ClientMessage => ({ tag: 'UnsubscribeMulti', value });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'CallReducer',\n        __CallReducer.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant('Subscribe', __Subscribe.getTypeScriptAlgebraicType()),\n      new SumTypeVariant(\n        'OneOffQuery',\n        __OneOffQuery.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeSingle',\n        __SubscribeSingle.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeMulti',\n        __SubscribeMulti.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'Unsubscribe',\n        __Unsubscribe.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeMulti',\n        __UnsubscribeMulti.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: ClientMessage): void {\n    ClientMessage.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ClientMessage {\n    return ClientMessage.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `ClientMessage`.\nexport type ClientMessage =\n  | ClientMessage.CallReducer\n  | ClientMessage.Subscribe\n  | ClientMessage.OneOffQuery\n  | ClientMessage.SubscribeSingle\n  | ClientMessage.SubscribeMulti\n  | ClientMessage.Unsubscribe\n  | ClientMessage.UnsubscribeMulti;\n\nexport default ClientMessage;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { BsatnRowList as __BsatnRowList } from './bsatn_row_list_type';\n\nexport type QueryUpdate = {\n  deletes: __BsatnRowList;\n  inserts: __BsatnRowList;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace QueryUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'deletes',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'inserts',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: QueryUpdate): void {\n    QueryUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): QueryUpdate {\n    return QueryUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryUpdate as __QueryUpdate } from './query_update_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace CompressableQueryUpdate {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type Uncompressed = { tag: 'Uncompressed'; value: __QueryUpdate };\n  export type Brotli = { tag: 'Brotli'; value: Uint8Array };\n  export type Gzip = { tag: 'Gzip'; value: Uint8Array };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const Uncompressed = (\n    value: __QueryUpdate\n  ): CompressableQueryUpdate => ({ tag: 'Uncompressed', value });\n  export const Brotli = (value: Uint8Array): CompressableQueryUpdate => ({\n    tag: 'Brotli',\n    value,\n  });\n  export const Gzip = (value: Uint8Array): CompressableQueryUpdate => ({\n    tag: 'Gzip',\n    value,\n  });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'Uncompressed',\n        __QueryUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'Brotli',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new SumTypeVariant(\n        'Gzip',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: CompressableQueryUpdate\n  ): void {\n    CompressableQueryUpdate.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): CompressableQueryUpdate {\n    return CompressableQueryUpdate.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n\n// The tagged union or sum type for the algebraic type `CompressableQueryUpdate`.\nexport type CompressableQueryUpdate =\n  | CompressableQueryUpdate.Uncompressed\n  | CompressableQueryUpdate.Brotli\n  | CompressableQueryUpdate.Gzip;\n\nexport default CompressableQueryUpdate;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { CompressableQueryUpdate as __CompressableQueryUpdate } from './compressable_query_update_type';\n\nexport type TableUpdate = {\n  tableId: number;\n  tableName: string;\n  numRows: bigint;\n  updates: __CompressableQueryUpdate[];\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TableUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement('numRows', AlgebraicType.createU64Type()),\n      new ProductTypeElement(\n        'updates',\n        AlgebraicType.createArrayType(\n          __CompressableQueryUpdate.getTypeScriptAlgebraicType()\n        )\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: TableUpdate): void {\n    TableUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): TableUpdate {\n    return TableUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { TableUpdate as __TableUpdate } from './table_update_type';\n\nexport type DatabaseUpdate = {\n  tables: __TableUpdate[];\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace DatabaseUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'tables',\n        AlgebraicType.createArrayType(\n          __TableUpdate.getTypeScriptAlgebraicType()\n        )\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: DatabaseUpdate): void {\n    DatabaseUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): DatabaseUpdate {\n    return DatabaseUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type EnergyQuanta = {\n  quanta: bigint;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace EnergyQuanta {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('quanta', AlgebraicType.createU128Type()),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: EnergyQuanta): void {\n    EnergyQuanta.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): EnergyQuanta {\n    return EnergyQuanta.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type IdentityToken = {\n  identity: Identity;\n  token: string;\n  connectionId: ConnectionId;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace IdentityToken {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('identity', AlgebraicType.createIdentityType()),\n      new ProductTypeElement('token', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'connectionId',\n        AlgebraicType.createConnectionIdType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: IdentityToken): void {\n    IdentityToken.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): IdentityToken {\n    return IdentityToken.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type InitialSubscription = {\n  databaseUpdate: __DatabaseUpdate;\n  requestId: number;\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace InitialSubscription {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'databaseUpdate',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: InitialSubscription\n  ): void {\n    InitialSubscription.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): InitialSubscription {\n    return InitialSubscription.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { BsatnRowList as __BsatnRowList } from './bsatn_row_list_type';\n\nexport type OneOffTable = {\n  tableName: string;\n  rows: __BsatnRowList;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffTable {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'rows',\n        __BsatnRowList.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: OneOffTable): void {\n    OneOffTable.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffTable {\n    return OneOffTable.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { OneOffTable as __OneOffTable } from './one_off_table_type';\n\nexport type OneOffQueryResponse = {\n  messageId: Uint8Array;\n  error: string | undefined;\n  tables: __OneOffTable[];\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace OneOffQueryResponse {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'messageId',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement(\n        'error',\n        AlgebraicType.createOptionType(AlgebraicType.createStringType())\n      ),\n      new ProductTypeElement(\n        'tables',\n        AlgebraicType.createArrayType(\n          __OneOffTable.getTypeScriptAlgebraicType()\n        )\n      ),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: OneOffQueryResponse\n  ): void {\n    OneOffQueryResponse.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): OneOffQueryResponse {\n    return OneOffQueryResponse.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type ReducerCallInfo = {\n  reducerName: string;\n  reducerId: number;\n  args: Uint8Array;\n  requestId: number;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace ReducerCallInfo {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('reducerName', AlgebraicType.createStringType()),\n      new ProductTypeElement('reducerId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'args',\n        AlgebraicType.createArrayType(AlgebraicType.createU8Type())\n      ),\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: ReducerCallInfo\n  ): void {\n    ReducerCallInfo.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ReducerCallInfo {\n    return ReducerCallInfo.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace UpdateStatus {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type Committed = { tag: 'Committed'; value: __DatabaseUpdate };\n  export type Failed = { tag: 'Failed'; value: string };\n  export type OutOfEnergy = { tag: 'OutOfEnergy' };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const Committed = (value: __DatabaseUpdate): UpdateStatus => ({\n    tag: 'Committed',\n    value,\n  });\n  export const Failed = (value: string): UpdateStatus => ({\n    tag: 'Failed',\n    value,\n  });\n  export const OutOfEnergy = { tag: 'OutOfEnergy' };\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'Committed',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant('Failed', AlgebraicType.createStringType()),\n      new SumTypeVariant('OutOfEnergy', AlgebraicType.createProductType([])),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: UpdateStatus): void {\n    UpdateStatus.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UpdateStatus {\n    return UpdateStatus.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `UpdateStatus`.\nexport type UpdateStatus =\n  | UpdateStatus.Committed\n  | UpdateStatus.Failed\n  | UpdateStatus.OutOfEnergy;\n\nexport default UpdateStatus;\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { UpdateStatus as __UpdateStatus } from './update_status_type';\nimport { ReducerCallInfo as __ReducerCallInfo } from './reducer_call_info_type';\nimport { EnergyQuanta as __EnergyQuanta } from './energy_quanta_type';\n\nexport type TransactionUpdate = {\n  status: __UpdateStatus;\n  timestamp: Timestamp;\n  callerIdentity: Identity;\n  callerConnectionId: ConnectionId;\n  reducerCall: __ReducerCallInfo;\n  energyQuantaUsed: __EnergyQuanta;\n  totalHostExecutionDuration: TimeDuration;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TransactionUpdate {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'status',\n        __UpdateStatus.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement('timestamp', AlgebraicType.createTimestampType()),\n      new ProductTypeElement(\n        'callerIdentity',\n        AlgebraicType.createIdentityType()\n      ),\n      new ProductTypeElement(\n        'callerConnectionId',\n        AlgebraicType.createConnectionIdType()\n      ),\n      new ProductTypeElement(\n        'reducerCall',\n        __ReducerCallInfo.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'energyQuantaUsed',\n        __EnergyQuanta.getTypeScriptAlgebraicType()\n      ),\n      new ProductTypeElement(\n        'totalHostExecutionDuration',\n        AlgebraicType.createTimeDurationType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: TransactionUpdate\n  ): void {\n    TransactionUpdate.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): TransactionUpdate {\n    return TransactionUpdate.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type TransactionUpdateLight = {\n  requestId: number;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace TransactionUpdateLight {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: TransactionUpdateLight\n  ): void {\n    TransactionUpdateLight.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): TransactionUpdateLight {\n    return TransactionUpdateLight.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { TableUpdate as __TableUpdate } from './table_update_type';\n\nexport type SubscribeRows = {\n  tableId: number;\n  tableName: string;\n  tableRows: __TableUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeRows {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('tableId', AlgebraicType.createU32Type()),\n      new ProductTypeElement('tableName', AlgebraicType.createStringType()),\n      new ProductTypeElement(\n        'tableRows',\n        __TableUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: SubscribeRows): void {\n    SubscribeRows.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeRows {\n    return SubscribeRows.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { SubscribeRows as __SubscribeRows } from './subscribe_rows_type';\n\nexport type SubscribeApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  rows: __SubscribeRows;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'rows',\n        __SubscribeRows.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeApplied\n  ): void {\n    SubscribeApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeApplied {\n    return SubscribeApplied.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { SubscribeRows as __SubscribeRows } from './subscribe_rows_type';\n\nexport type UnsubscribeApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  rows: __SubscribeRows;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'rows',\n        __SubscribeRows.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeApplied\n  ): void {\n    UnsubscribeApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeApplied {\n    return UnsubscribeApplied.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nexport type SubscriptionError = {\n  totalHostExecutionDurationMicros: bigint;\n  requestId: number | undefined;\n  queryId: number | undefined;\n  tableId: number | undefined;\n  error: string;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscriptionError {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement(\n        'requestId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement(\n        'queryId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement(\n        'tableId',\n        AlgebraicType.createOptionType(AlgebraicType.createU32Type())\n      ),\n      new ProductTypeElement('error', AlgebraicType.createStringType()),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscriptionError\n  ): void {\n    SubscriptionError.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscriptionError {\n    return SubscriptionError.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type SubscribeMultiApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace SubscribeMultiApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: SubscribeMultiApplied\n  ): void {\n    SubscribeMultiApplied.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): SubscribeMultiApplied {\n    return SubscribeMultiApplied.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { QueryId as __QueryId } from './query_id_type';\nimport { DatabaseUpdate as __DatabaseUpdate } from './database_update_type';\n\nexport type UnsubscribeMultiApplied = {\n  requestId: number;\n  totalHostExecutionDurationMicros: bigint;\n  queryId: __QueryId;\n  update: __DatabaseUpdate;\n};\n\n/**\n * A namespace for generated helper functions.\n */\nexport namespace UnsubscribeMultiApplied {\n  /**\n   * A function which returns this type represented as an AlgebraicType.\n   * This function is derived from the AlgebraicType used to generate this type.\n   */\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createProductType([\n      new ProductTypeElement('requestId', AlgebraicType.createU32Type()),\n      new ProductTypeElement(\n        'totalHostExecutionDurationMicros',\n        AlgebraicType.createU64Type()\n      ),\n      new ProductTypeElement('queryId', __QueryId.getTypeScriptAlgebraicType()),\n      new ProductTypeElement(\n        'update',\n        __DatabaseUpdate.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(\n    writer: BinaryWriter,\n    value: UnsubscribeMultiApplied\n  ): void {\n    UnsubscribeMultiApplied.getTypeScriptAlgebraicType().serialize(\n      writer,\n      value\n    );\n  }\n\n  export function deserialize(reader: BinaryReader): UnsubscribeMultiApplied {\n    return UnsubscribeMultiApplied.getTypeScriptAlgebraicType().deserialize(\n      reader\n    );\n  }\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE\n// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.\n\n/* eslint-disable */\n/* tslint:disable */\n// @ts-nocheck\nimport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  CallReducerFlags,\n  ConnectionId,\n  DbConnectionBuilder,\n  DbConnectionImpl,\n  DbContext,\n  ErrorContextInterface,\n  Event,\n  EventContextInterface,\n  Identity,\n  ProductType,\n  ProductTypeElement,\n  ReducerEventContextInterface,\n  SubscriptionBuilderImpl,\n  SubscriptionEventContextInterface,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  TimeDuration,\n  Timestamp,\n  deepEqual,\n} from '../index';\nimport { InitialSubscription as __InitialSubscription } from './initial_subscription_type';\nimport { TransactionUpdate as __TransactionUpdate } from './transaction_update_type';\nimport { TransactionUpdateLight as __TransactionUpdateLight } from './transaction_update_light_type';\nimport { IdentityToken as __IdentityToken } from './identity_token_type';\nimport { OneOffQueryResponse as __OneOffQueryResponse } from './one_off_query_response_type';\nimport { SubscribeApplied as __SubscribeApplied } from './subscribe_applied_type';\nimport { UnsubscribeApplied as __UnsubscribeApplied } from './unsubscribe_applied_type';\nimport { SubscriptionError as __SubscriptionError } from './subscription_error_type';\nimport { SubscribeMultiApplied as __SubscribeMultiApplied } from './subscribe_multi_applied_type';\nimport { UnsubscribeMultiApplied as __UnsubscribeMultiApplied } from './unsubscribe_multi_applied_type';\n\n// A namespace for generated variants and helper functions.\nexport namespace ServerMessage {\n  // These are the generated variant types for each variant of the tagged union.\n  // One type is generated per variant and will be used in the `value` field of\n  // the tagged union.\n  export type InitialSubscription = {\n    tag: 'InitialSubscription';\n    value: __InitialSubscription;\n  };\n  export type TransactionUpdate = {\n    tag: 'TransactionUpdate';\n    value: __TransactionUpdate;\n  };\n  export type TransactionUpdateLight = {\n    tag: 'TransactionUpdateLight';\n    value: __TransactionUpdateLight;\n  };\n  export type IdentityToken = { tag: 'IdentityToken'; value: __IdentityToken };\n  export type OneOffQueryResponse = {\n    tag: 'OneOffQueryResponse';\n    value: __OneOffQueryResponse;\n  };\n  export type SubscribeApplied = {\n    tag: 'SubscribeApplied';\n    value: __SubscribeApplied;\n  };\n  export type UnsubscribeApplied = {\n    tag: 'UnsubscribeApplied';\n    value: __UnsubscribeApplied;\n  };\n  export type SubscriptionError = {\n    tag: 'SubscriptionError';\n    value: __SubscriptionError;\n  };\n  export type SubscribeMultiApplied = {\n    tag: 'SubscribeMultiApplied';\n    value: __SubscribeMultiApplied;\n  };\n  export type UnsubscribeMultiApplied = {\n    tag: 'UnsubscribeMultiApplied';\n    value: __UnsubscribeMultiApplied;\n  };\n\n  // Helper functions for constructing each variant of the tagged union.\n  // ```\n  // const foo = Foo.A(42);\n  // assert!(foo.tag === \"A\");\n  // assert!(foo.value === 42);\n  // ```\n  export const InitialSubscription = (\n    value: __InitialSubscription\n  ): ServerMessage => ({ tag: 'InitialSubscription', value });\n  export const TransactionUpdate = (\n    value: __TransactionUpdate\n  ): ServerMessage => ({ tag: 'TransactionUpdate', value });\n  export const TransactionUpdateLight = (\n    value: __TransactionUpdateLight\n  ): ServerMessage => ({ tag: 'TransactionUpdateLight', value });\n  export const IdentityToken = (value: __IdentityToken): ServerMessage => ({\n    tag: 'IdentityToken',\n    value,\n  });\n  export const OneOffQueryResponse = (\n    value: __OneOffQueryResponse\n  ): ServerMessage => ({ tag: 'OneOffQueryResponse', value });\n  export const SubscribeApplied = (\n    value: __SubscribeApplied\n  ): ServerMessage => ({ tag: 'SubscribeApplied', value });\n  export const UnsubscribeApplied = (\n    value: __UnsubscribeApplied\n  ): ServerMessage => ({ tag: 'UnsubscribeApplied', value });\n  export const SubscriptionError = (\n    value: __SubscriptionError\n  ): ServerMessage => ({ tag: 'SubscriptionError', value });\n  export const SubscribeMultiApplied = (\n    value: __SubscribeMultiApplied\n  ): ServerMessage => ({ tag: 'SubscribeMultiApplied', value });\n  export const UnsubscribeMultiApplied = (\n    value: __UnsubscribeMultiApplied\n  ): ServerMessage => ({ tag: 'UnsubscribeMultiApplied', value });\n\n  export function getTypeScriptAlgebraicType(): AlgebraicType {\n    return AlgebraicType.createSumType([\n      new SumTypeVariant(\n        'InitialSubscription',\n        __InitialSubscription.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'TransactionUpdate',\n        __TransactionUpdate.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'TransactionUpdateLight',\n        __TransactionUpdateLight.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'IdentityToken',\n        __IdentityToken.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'OneOffQueryResponse',\n        __OneOffQueryResponse.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeApplied',\n        __SubscribeApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeApplied',\n        __UnsubscribeApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscriptionError',\n        __SubscriptionError.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'SubscribeMultiApplied',\n        __SubscribeMultiApplied.getTypeScriptAlgebraicType()\n      ),\n      new SumTypeVariant(\n        'UnsubscribeMultiApplied',\n        __UnsubscribeMultiApplied.getTypeScriptAlgebraicType()\n      ),\n    ]);\n  }\n\n  export function serialize(writer: BinaryWriter, value: ServerMessage): void {\n    ServerMessage.getTypeScriptAlgebraicType().serialize(writer, value);\n  }\n\n  export function deserialize(reader: BinaryReader): ServerMessage {\n    return ServerMessage.getTypeScriptAlgebraicType().deserialize(reader);\n  }\n}\n\n// The tagged union or sum type for the algebraic type `ServerMessage`.\nexport type ServerMessage =\n  | ServerMessage.InitialSubscription\n  | ServerMessage.TransactionUpdate\n  | ServerMessage.TransactionUpdateLight\n  | ServerMessage.IdentityToken\n  | ServerMessage.OneOffQueryResponse\n  | ServerMessage.SubscribeApplied\n  | ServerMessage.UnsubscribeApplied\n  | ServerMessage.SubscriptionError\n  | ServerMessage.SubscribeMultiApplied\n  | ServerMessage.UnsubscribeMultiApplied;\n\nexport default ServerMessage;\n","export class EventEmitter<Key, Callback extends Function = Function> {\n  #events: Map<Key, Set<Callback>> = new Map();\n\n  on(event: Key, callback: Callback): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.#events.set(event, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  off(event: Key, callback: Callback): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      return;\n    }\n    callbacks.delete(callback);\n  }\n\n  emit(event: Key, ...args: any[]): void {\n    let callbacks = this.#events.get(event);\n    if (!callbacks) {\n      return;\n    }\n\n    for (let callback of callbacks) {\n      callback(...args);\n    }\n  }\n}\n","export default class OperationsMap<K, V> {\n  #items: { key: K; value: V }[] = [];\n\n  #isEqual(a: K, b: K): boolean {\n    if (a && typeof a === 'object' && 'isEqual' in a) {\n      return (a as any).isEqual(b);\n    }\n    return a === b;\n  }\n\n  set(key: K, value: V): void {\n    const existingIndex = this.#items.findIndex(({ key: k }) =>\n      this.#isEqual(k, key)\n    );\n    if (existingIndex > -1) {\n      this.#items[existingIndex].value = value;\n    } else {\n      this.#items.push({ key, value });\n    }\n  }\n\n  get(key: K): V | undefined {\n    const item = this.#items.find(({ key: k }) => this.#isEqual(k, key));\n    return item ? item.value : undefined;\n  }\n\n  delete(key: K): boolean {\n    const existingIndex = this.#items.findIndex(({ key: k }) =>\n      this.#isEqual(k, key)\n    );\n    if (existingIndex > -1) {\n      this.#items.splice(existingIndex, 1);\n      return true;\n    }\n    return false;\n  }\n\n  has(key: K): boolean {\n    return this.#items.some(({ key: k }) => this.#isEqual(k, key));\n  }\n\n  values(): Array<V> {\n    return this.#items.map(i => i.value);\n  }\n\n  entries(): Array<{ key: K; value: V }> {\n    return this.#items;\n  }\n\n  [Symbol.iterator](): Iterator<{ key: K; value: V }> {\n    let index = 0;\n    const items = this.#items;\n    return {\n      next(): IteratorResult<{ key: K; value: V }> {\n        if (index < items.length) {\n          return { value: items[index++], done: false };\n        } else {\n          return { value: null, done: true };\n        }\n      },\n    };\n  }\n}\n","type LogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nconst LogLevelIdentifierIcon = {\n  component: '📦',\n  info: 'ℹ️',\n  warn: '⚠️',\n  error: '❌',\n  debug: '🐛',\n};\n\nconst LogStyle = {\n  component:\n    'color: #fff; background-color: #8D6FDD; padding: 2px 5px; border-radius: 3px;',\n  info: 'color: #fff; background-color: #007bff; padding: 2px 5px; border-radius: 3px;',\n  warn: 'color: #fff; background-color: #ffc107; padding: 2px 5px; border-radius: 3px;',\n  error:\n    'color: #fff; background-color: #dc3545; padding: 2px 5px; border-radius: 3px;',\n  debug:\n    'color: #fff; background-color: #28a745; padding: 2px 5px; border-radius: 3px;',\n};\n\nconst LogTextStyle = {\n  component: 'color: #8D6FDD;',\n  info: 'color: #007bff;',\n  warn: 'color: #ffc107;',\n  error: 'color: #dc3545;',\n  debug: 'color: #28a745;',\n};\n\nexport const stdbLogger = (level: LogLevel, message: any): void => {\n  console.log(\n    `%c${LogLevelIdentifierIcon[level]} ${level.toUpperCase()}%c ${message}`,\n    LogStyle[level],\n    LogTextStyle[level]\n  );\n};\n","import { EventEmitter } from './event_emitter.ts';\nimport OperationsMap from './operations_map.ts';\nimport type { TableRuntimeTypeInfo } from './spacetime_module.ts';\n\nimport { type EventContextInterface } from './db_connection_impl.ts';\nimport { stdbLogger } from './logger.ts';\n\nexport type Operation = {\n  type: 'insert' | 'delete';\n  rowId: string;\n  row: any;\n};\n\nexport type TableUpdate = {\n  tableName: string;\n  operations: Operation[];\n};\n\nexport type PendingCallback = {\n  type: 'insert' | 'delete' | 'update';\n  table: string;\n  cb: () => void;\n};\n/**\n * Builder to generate calls to query a `table` in the database\n */\nexport class TableCache<RowType = any> {\n  private rows: Map<string, [RowType, number]>;\n  private tableTypeInfo: TableRuntimeTypeInfo;\n  private emitter: EventEmitter<'insert' | 'delete' | 'update'>;\n\n  /**\n   * @param name the table name\n   * @param primaryKeyCol column index designated as `#[primarykey]`\n   * @param primaryKey column name designated as `#[primarykey]`\n   * @param entityClass the entityClass\n   */\n  constructor(tableTypeInfo: TableRuntimeTypeInfo) {\n    this.tableTypeInfo = tableTypeInfo;\n    this.rows = new Map();\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * @returns number of rows in the table\n   */\n  count(): number {\n    return this.rows.size;\n  }\n\n  /**\n   * @returns The values of the rows in the table\n   */\n  iter(): any[] {\n    return Array.from(this.rows.values()).map(([row]) => row);\n  }\n\n  applyOperations = (\n    operations: Operation[],\n    ctx: EventContextInterface\n  ): PendingCallback[] => {\n    const pendingCallbacks: PendingCallback[] = [];\n    if (this.tableTypeInfo.primaryKey !== undefined) {\n      const primaryKey = this.tableTypeInfo.primaryKey;\n      const insertMap = new OperationsMap<any, [Operation, number]>();\n      const deleteMap = new OperationsMap<any, [Operation, number]>();\n      for (const op of operations) {\n        if (op.type === 'insert') {\n          const [_, prevCount] = insertMap.get(op.row[primaryKey]) || [op, 0];\n          insertMap.set(op.row[primaryKey], [op, prevCount + 1]);\n        } else {\n          const [_, prevCount] = deleteMap.get(op.row[primaryKey]) || [op, 0];\n          deleteMap.set(op.row[primaryKey], [op, prevCount + 1]);\n        }\n      }\n      for (const {\n        key: primaryKey,\n        value: [insertOp, refCount],\n      } of insertMap) {\n        const deleteEntry = deleteMap.get(primaryKey);\n        if (deleteEntry) {\n          const [deleteOp, deleteCount] = deleteEntry;\n          // In most cases the refCountDelta will be either 0 or refCount, but if\n          // an update moves a row in or out of the result set of different queries, then\n          // other deltas are possible.\n          const refCountDelta = refCount - deleteCount;\n          const maybeCb = this.update(ctx, insertOp, deleteOp, refCountDelta);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n          deleteMap.delete(primaryKey);\n        } else {\n          const maybeCb = this.insert(ctx, insertOp, refCount);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        }\n      }\n      for (const [deleteOp, refCount] of deleteMap.values()) {\n        const maybeCb = this.delete(ctx, deleteOp, refCount);\n        if (maybeCb) {\n          pendingCallbacks.push(maybeCb);\n        }\n      }\n    } else {\n      for (const op of operations) {\n        if (op.type === 'insert') {\n          const maybeCb = this.insert(ctx, op);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        } else {\n          const maybeCb = this.delete(ctx, op);\n          if (maybeCb) {\n            pendingCallbacks.push(maybeCb);\n          }\n        }\n      }\n    }\n    return pendingCallbacks;\n  };\n\n  update = (\n    ctx: EventContextInterface,\n    newDbOp: Operation,\n    oldDbOp: Operation,\n    refCountDelta: number = 0\n  ): PendingCallback | undefined => {\n    const [oldRow, previousCount] = this.rows.get(oldDbOp.rowId) || [\n      oldDbOp.row,\n      0,\n    ];\n    const refCount = Math.max(1, previousCount + refCountDelta);\n    this.rows.delete(oldDbOp.rowId);\n    this.rows.set(newDbOp.rowId, [newDbOp.row, refCount]);\n    // This indicates something is wrong, so we could arguably crash here.\n    if (previousCount === 0) {\n      stdbLogger('error', 'Updating a row that was not present in the cache');\n      return {\n        type: 'insert',\n        table: this.tableTypeInfo.tableName,\n        cb: () => {\n          this.emitter.emit('insert', ctx, newDbOp.row);\n        },\n      };\n    } else if (previousCount + refCountDelta <= 0) {\n      stdbLogger('error', 'Negative reference count for row');\n      // TODO: We should actually error and kill the connection here.\n    }\n    return {\n      type: 'update',\n      table: this.tableTypeInfo.tableName,\n      cb: () => {\n        this.emitter.emit('update', ctx, oldRow, newDbOp.row);\n      },\n    };\n  };\n\n  insert = (\n    ctx: EventContextInterface,\n    operation: Operation,\n    count: number = 1\n  ): PendingCallback | undefined => {\n    const [_, previousCount] = this.rows.get(operation.rowId) || [\n      operation.row,\n      0,\n    ];\n    this.rows.set(operation.rowId, [operation.row, previousCount + count]);\n    if (previousCount === 0) {\n      return {\n        type: 'insert',\n        table: this.tableTypeInfo.tableName,\n        cb: () => {\n          this.emitter.emit('insert', ctx, operation.row);\n        },\n      };\n    }\n    return undefined;\n  };\n\n  delete = (\n    ctx: EventContextInterface,\n    operation: Operation,\n    count: number = 1\n  ): PendingCallback | undefined => {\n    const [_, previousCount] = this.rows.get(operation.rowId) || [\n      operation.row,\n      0,\n    ];\n    // This should never happen.\n    if (previousCount === 0) {\n      stdbLogger('warn', 'Deleting a row that was not present in the cache');\n      return undefined;\n    }\n    // If this was the last reference, we are actually deleting the row.\n    if (previousCount <= count) {\n      // TODO: Log a warning/error if previousCount is less than count.\n      this.rows.delete(operation.rowId);\n      return {\n        type: 'delete',\n        table: this.tableTypeInfo.tableName,\n        cb: () => {\n          this.emitter.emit('delete', ctx, operation.row);\n        },\n      };\n    }\n    this.rows.set(operation.rowId, [operation.row, previousCount - count]);\n    return undefined;\n  };\n\n  /**\n   * Register a callback for when a row is newly inserted into the database.\n   *\n   * ```ts\n   * User.onInsert((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"New user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"New user received during subscription update on insert\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onInsert = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.on('insert', cb);\n  };\n\n  /**\n   * Register a callback for when a row is deleted from the database.\n   *\n   * ```ts\n   * User.onDelete((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"Deleted user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"Deleted user received during subscription update on update\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onDelete = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.on('delete', cb);\n  };\n\n  /**\n   * Register a callback for when a row is updated into the database.\n   *\n   * ```ts\n   * User.onInsert((user, reducerEvent) => {\n   *   if (reducerEvent) {\n   *      console.log(\"Updated user on reducer\", reducerEvent, user);\n   *   } else {\n   *      console.log(\"Updated user received during subscription update on delete\", user);\n   *  }\n   * });\n   * ```\n   *\n   * @param cb Callback to be called when a new row is inserted\n   */\n  onUpdate = <EventContext>(\n    cb: (ctx: EventContext, oldRow: RowType, row: RowType) => void\n  ): void => {\n    this.emitter.on('update', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is newly inserted into the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnInsert = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.off('insert', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is deleted from the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnDelete = <EventContext>(\n    cb: (ctx: EventContext, row: RowType) => void\n  ): void => {\n    this.emitter.off('delete', cb);\n  };\n\n  /**\n   * Remove a callback for when a row is updated into the database.\n   *\n   * @param cb Callback to be removed\n   */\n  removeOnUpdate = <EventContext>(\n    cb: (ctx: EventContext, oldRow: RowType, row: RowType) => void\n  ): void => {\n    this.emitter.off('update', cb);\n  };\n}\n","import type { TableRuntimeTypeInfo } from './spacetime_module.ts';\nimport { TableCache } from './table_cache.ts';\n\nexport class ClientCache {\n  /**\n   * The tables in the database.\n   */\n  tables: Map<string, TableCache>;\n\n  constructor() {\n    this.tables = new Map();\n  }\n\n  /**\n   * Returns the table with the given name.\n   * @param name The name of the table.\n   * @returns The table\n   */\n  getTable(name: string): TableCache {\n    const table = this.tables.get(name);\n\n    // ! This should not happen as the table should be available but an exception is thrown just in case.\n    if (!table) {\n      console.error(\n        'The table has not been registered for this client. Please register the table before using it. If you have registered global tables using the SpacetimeDBClient.registerTables() or `registerTable()` method, please make sure that is executed first!'\n      );\n      throw new Error(`Table ${name} does not exist`);\n    }\n\n    return table;\n  }\n\n  getOrCreateTable<RowType>(\n    tableTypeInfo: TableRuntimeTypeInfo\n  ): TableCache<RowType> {\n    let table: TableCache;\n    if (!this.tables.has(tableTypeInfo.tableName)) {\n      table = new TableCache<RowType>(tableTypeInfo);\n      this.tables.set(tableTypeInfo.tableName, table);\n    } else {\n      table = this.tables.get(tableTypeInfo.tableName)!;\n    }\n    return table;\n  }\n}\n","export async function decompress(\n  buffer: Uint8Array,\n  // Leaving it here to expand to brotli when it lands in the browsers and NodeJS\n  type: 'gzip',\n  chunkSize: number = 128 * 1024 // 128KB\n): Promise<Uint8Array> {\n  // Create a single ReadableStream to handle chunks\n  let offset = 0;\n  const readableStream = new ReadableStream({\n    pull(controller) {\n      if (offset < buffer.length) {\n        // Slice a chunk of the buffer and enqueue it\n        const chunk = buffer.subarray(\n          offset,\n          Math.min(offset + chunkSize, buffer.length)\n        );\n        controller.enqueue(chunk);\n        offset += chunkSize;\n      } else {\n        controller.close();\n      }\n    },\n  });\n\n  // Create a single DecompressionStream\n  const decompressionStream = new DecompressionStream(type);\n\n  // Pipe the ReadableStream through the DecompressionStream\n  const decompressedStream = readableStream.pipeThrough(decompressionStream);\n\n  // Collect the decompressed chunks efficiently\n  const reader = decompressedStream.getReader();\n  const chunks: Uint8Array[] = [];\n  let totalLength = 0;\n  let result: any;\n\n  while (!(result = await reader.read()).done) {\n    chunks.push(result.value);\n    totalLength += result.value.length;\n  }\n\n  // Allocate a single Uint8Array for the decompressed data\n  const decompressedArray = new Uint8Array(totalLength);\n  let chunkOffset = 0;\n\n  for (const chunk of chunks) {\n    decompressedArray.set(chunk, chunkOffset);\n    chunkOffset += chunk.length;\n  }\n\n  return decompressedArray;\n}\n","import { decompress } from './decompress';\n\nexport class WebsocketDecompressAdapter {\n  onclose?: (...ev: any[]) => void;\n  onopen?: (...ev: any[]) => void;\n  onmessage?: (msg: { data: Uint8Array }) => void;\n  onerror?: (msg: ErrorEvent) => void;\n\n  #ws: WebSocket;\n\n  async #handleOnMessage(msg: MessageEvent) {\n    const buffer = new Uint8Array(msg.data);\n    let decompressed: Uint8Array;\n\n    if (buffer[0] === 0) {\n      decompressed = buffer.slice(1);\n    } else if (buffer[0] === 1) {\n      throw new Error(\n        'Brotli Compression not supported. Please use gzip or none compression in withCompression method on DbConnection.'\n      );\n    } else if (buffer[0] === 2) {\n      decompressed = await decompress(buffer.slice(1), 'gzip');\n    } else {\n      throw new Error(\n        'Unexpected Compression Algorithm. Please use `gzip` or `none`'\n      );\n    }\n\n    this.onmessage?.({ data: decompressed });\n  }\n\n  #handleOnOpen(msg: any) {\n    this.onopen?.(msg);\n  }\n\n  #handleOnError(msg: any) {\n    this.onerror?.(msg);\n  }\n\n  send(msg: any): void {\n    this.#ws.send(msg);\n  }\n\n  close(): void {\n    this.#ws.close();\n  }\n\n  constructor(ws: WebSocket) {\n    this.onmessage = undefined;\n    this.onopen = undefined;\n    this.onmessage = undefined;\n    this.onerror = undefined;\n\n    ws.onmessage = this.#handleOnMessage.bind(this);\n    ws.onerror = this.#handleOnError.bind(this);\n    ws.onclose = this.#handleOnError.bind(this);\n    ws.onopen = this.#handleOnOpen.bind(this);\n\n    ws.binaryType = 'arraybuffer';\n\n    this.#ws = ws;\n  }\n\n  static async createWebSocketFn({\n    url,\n    wsProtocol,\n    authToken,\n    compression,\n    lightMode,\n  }: {\n    url: URL;\n    wsProtocol: string;\n    authToken?: string;\n    compression: 'gzip' | 'none';\n    lightMode: boolean;\n  }): Promise<WebsocketDecompressAdapter> {\n    const headers = new Headers();\n\n    let WS: typeof WebSocket;\n\n    // @ts-ignore\n    if (import.meta.env.BROWSER === 'false') {\n      WS =\n        'WebSocket' in globalThis\n          ? WebSocket\n          : ((await import('undici')).WebSocket as unknown as typeof WebSocket);\n    } else {\n      WS = WebSocket;\n    }\n\n    if (authToken) {\n      headers.set('Authorization', `Bearer ${authToken}`);\n      const tokenUrl = new URL('/v1/identity/websocket-token', url);\n      tokenUrl.protocol = url.protocol === 'wss:' ? 'https:' : 'http:';\n\n      const response = await fetch(tokenUrl, { method: 'POST', headers });\n      if (response.ok) {\n        const { token } = await response.json();\n        url.searchParams.set('token', token);\n        url.searchParams.set(\n          'compression',\n          compression === 'gzip' ? 'Gzip' : 'None'\n        );\n        if (lightMode) {\n          url.searchParams.set('light', 'true');\n        }\n      }\n    }\n\n    const ws = new WS(url, wsProtocol);\n\n    return new WebsocketDecompressAdapter(ws);\n  }\n}\n","import { DbConnectionImpl, type ConnectionEvent } from './db_connection_impl';\nimport { EventEmitter } from './event_emitter';\nimport type { Identity } from './identity';\nimport type RemoteModule from './spacetime_module';\nimport { WebsocketDecompressAdapter } from './websocket_decompress_adapter';\n\n/**\n * The database client connection to a SpacetimeDB server.\n */\nexport class DbConnectionBuilder<\n  DbConnection,\n  ErrorContext,\n  SubscriptionEventContext,\n> {\n  #uri?: URL;\n  #nameOrAddress?: string;\n  #identity?: Identity;\n  #token?: string;\n  #emitter: EventEmitter<ConnectionEvent> = new EventEmitter();\n  #compression: 'gzip' | 'none' = 'gzip';\n  #lightMode: boolean = false;\n  #createWSFn: typeof WebsocketDecompressAdapter.createWebSocketFn;\n\n  /**\n   * Creates a new `DbConnectionBuilder` database client and set the initial parameters.\n   *\n   * Users are not expected to call this constructor directly. Instead, use the static method `DbConnection.builder()`.\n   *\n   * @param remoteModule The remote module to use to connect to the SpacetimeDB server.\n   * @param dbConnectionConstructor The constructor to use to create a new `DbConnection`.\n   */\n  constructor(\n    private remoteModule: RemoteModule,\n    private dbConnectionConstructor: (imp: DbConnectionImpl) => DbConnection\n  ) {\n    this.#createWSFn = WebsocketDecompressAdapter.createWebSocketFn;\n  }\n\n  /**\n   * Set the URI of the SpacetimeDB server to connect to.\n   *\n   * @param uri The URI of the SpacetimeDB server to connect to.\n   *\n   **/\n  withUri(uri: string | URL): this {\n    this.#uri = new URL(uri);\n    return this;\n  }\n\n  /**\n   * Set the name or Identity of the database module to connect to.\n   *\n   * @param nameOrAddress\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   */\n  withModuleName(nameOrAddress: string): this {\n    this.#nameOrAddress = nameOrAddress;\n    return this;\n  }\n\n  /**\n   * Set the identity of the client to connect to the database.\n   *\n   * @param token The credentials to use to authenticate with SpacetimeDB. This\n   * is optional. You can store the token returned by the `onConnect` callback\n   * to use in future connections.\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   */\n  withToken(token?: string): this {\n    this.#token = token;\n    return this;\n  }\n\n  withWSFn(\n    createWSFn: (args: {\n      url: URL;\n      wsProtocol: string;\n      authToken?: string;\n    }) => Promise<WebsocketDecompressAdapter>\n  ): this {\n    this.#createWSFn = createWSFn;\n    return this;\n  }\n\n  /**\n   * Set the compression algorithm to use for the connection.\n   *\n   * @param compression The compression algorithm to use for the connection.\n   */\n  withCompression(compression: 'gzip' | 'none'): this {\n    this.#compression = compression;\n    return this;\n  }\n\n  /**\n   * Sets the connection to operate in light mode.\n   *\n   * Light mode is a mode that reduces the amount of data sent over the network.\n   *\n   * @param lightMode The light mode for the connection.\n   */\n  withLightMode(lightMode: boolean): this {\n    this.#lightMode = lightMode;\n    return this;\n  }\n\n  /**\n   * Register a callback to be invoked upon authentication with the database.\n   *\n   * @param identity A unique identifier for a client connected to a database.\n   * @param token The credentials to use to authenticate with SpacetimeDB.\n   *\n   * @returns The `DbConnectionBuilder` instance.\n   *\n   * The callback will be invoked with the `Identity` and private authentication `token` provided by the database to identify this connection.\n   *\n   * If credentials were supplied to connect, those passed to the callback will be equivalent to the ones used to connect.\n   *\n   * If the initial connection was anonymous, a new set of credentials will be generated by the database to identify this user.\n   *\n   * The credentials passed to the callback can be saved and used to authenticate the same user in future connections.\n   *\n   * @example\n   *\n   * ```ts\n   * DbConnection.builder().onConnect((ctx, identity, token) => {\n   *  console.log(\"Connected to SpacetimeDB with identity:\", identity.toHexString());\n   * });\n   * ```\n   */\n  onConnect(\n    callback: (\n      connection: DbConnection,\n      identity: Identity,\n      token: string\n    ) => void\n  ): this {\n    this.#emitter.on('connect', callback);\n    return this;\n  }\n\n  /**\n   * Register a callback to be invoked upon an error.\n   *\n   * @example\n   *\n   * ```ts\n   * DbConnection.builder().onConnectError((ctx, error) => {\n   *   console.log(\"Error connecting to SpacetimeDB:\", error);\n   * });\n   * ```\n   */\n  onConnectError(callback: (ctx: ErrorContext, error: Error) => void): this {\n    this.#emitter.on('connectError', callback);\n    return this;\n  }\n\n  /**\n   * Registers a callback to run when a {@link DbConnection} whose connection initially succeeded\n   * is disconnected, either after a {@link DbConnection.disconnect} call or due to an error.\n   *\n   * If the connection ended because of an error, the error is passed to the callback.\n   *\n   * The `callback` will be installed on the `DbConnection` created by `build`\n   * before initiating the connection, ensuring there's no opportunity for the disconnect to happen\n   * before the callback is installed.\n   *\n   * Note that this does not trigger if `build` fails\n   * or in cases where {@link DbConnectionBuilder.onConnectError} would trigger.\n   * This callback only triggers if the connection closes after `build` returns successfully\n   * and {@link DbConnectionBuilder.onConnect} is invoked, i.e., after the `IdentityToken` is received.\n   *\n   * To simplify SDK implementation, at most one such callback can be registered.\n   * Calling `onDisconnect` on the same `DbConnectionBuilder` multiple times throws an error.\n   *\n   * Unlike callbacks registered via {@link DbConnection},\n   * no mechanism is provided to unregister the provided callback.\n   * This is a concession to ergonomics; there's no clean place to return a `CallbackId` from this method\n   * or from `build`.\n   *\n   * @param {function(error?: Error): void} callback - The callback to invoke upon disconnection.\n   * @throws {Error} Throws an error if called multiple times on the same `DbConnectionBuilder`.\n   */\n  onDisconnect(\n    callback: (ctx: ErrorContext, error?: Error | undefined) => void\n  ): this {\n    this.#emitter.on('disconnect', callback);\n    return this;\n  }\n\n  /**\n   * Builds a new `DbConnection` with the parameters set on this `DbConnectionBuilder` and attempts to connect to the SpacetimeDB server.\n   *\n   * @returns A new `DbConnection` with the parameters set on this `DbConnectionBuilder`.\n   *\n   * @example\n   *\n   * ```ts\n   * const host = \"http://localhost:3000\";\n   * const name_or_address = \"database_name\"\n   * const auth_token = undefined;\n   * DbConnection.builder().withUri(host).withModuleName(name_or_address).withToken(auth_token).build();\n   * ```\n   */\n  build(): DbConnection {\n    if (!this.#uri) {\n      throw new Error('URI is required to connect to SpacetimeDB');\n    }\n\n    if (!this.#nameOrAddress) {\n      throw new Error(\n        'Database name or address is required to connect to SpacetimeDB'\n      );\n    }\n\n    return this.dbConnectionConstructor(\n      new DbConnectionImpl({\n        uri: this.#uri,\n        nameOrAddress: this.#nameOrAddress,\n        identity: this.#identity,\n        token: this.#token,\n        emitter: this.#emitter,\n        compression: this.#compression,\n        lightMode: this.#lightMode,\n        createWSFn: this.#createWSFn,\n        remoteModule: this.remoteModule,\n      })\n    );\n  }\n}\n","import type { DbConnectionImpl } from './db_connection_impl';\nimport type {\n  ErrorContextInterface,\n  SubscriptionEventContextInterface,\n} from './event_context';\nimport { EventEmitter } from './event_emitter';\n\nexport class SubscriptionBuilderImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> {\n  #onApplied?: (\n    ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n  ) => void = undefined;\n  #onError?: (\n    ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>\n  ) => void = undefined;\n  constructor(\n    private db: DbConnectionImpl<DBView, Reducers, SetReducerFlags>\n  ) {}\n\n  /**\n   * Registers `callback` to run when this query is successfully added to our subscribed set,\n   * I.e. when its `SubscriptionApplied` message is received.\n   *\n   * The database state exposed via the `&EventContext` argument\n   * includes all the rows added to the client cache as a result of the new subscription.\n   *\n   * The event in the `&EventContext` argument is `Event::SubscribeApplied`.\n   *\n   * Multiple `on_applied` callbacks for the same query may coexist.\n   * No mechanism for un-registering `on_applied` callbacks is exposed.\n   *\n   * @param cb - Callback to run when the subscription is applied.\n   * @returns The current `SubscriptionBuilder` instance.\n   */\n  onApplied(\n    cb: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void\n  ): SubscriptionBuilderImpl<DBView, Reducers, SetReducerFlags> {\n    this.#onApplied = cb;\n    return this;\n  }\n\n  /**\n   * Registers `callback` to run when this query either:\n   * - Fails to be added to our subscribed set.\n   * - Is unexpectedly removed from our subscribed set.\n   *\n   * If the subscription had previously started and has been unexpectedly removed,\n   * the database state exposed via the `&EventContext` argument contains no rows\n   * from any subscriptions removed within the same error event.\n   * As proposed, it must therefore contain no rows.\n   *\n   * The event in the `&EventContext` argument is `Event::SubscribeError`,\n   * containing a dynamic error object with a human-readable description of the error\n   * for diagnostic purposes.\n   *\n   * Multiple `on_error` callbacks for the same query may coexist.\n   * No mechanism for un-registering `on_error` callbacks is exposed.\n   *\n   * @param cb - Callback to run when there is an error in subscription.\n   * @returns The current `SubscriptionBuilder` instance.\n   */\n  onError(\n    cb: (ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>) => void\n  ): SubscriptionBuilderImpl<DBView, Reducers, SetReducerFlags> {\n    this.#onError = cb;\n    return this;\n  }\n\n  /**\n   * Subscribe to a single query. The results of the query will be merged into the client\n   * cache and deduplicated on the client.\n   *\n   * @param query_sql A `SQL` query to subscribe to.\n   *\n   * @example\n   *\n   * ```ts\n   * const subscription = connection.subscriptionBuilder().onApplied(() => {\n   *   console.log(\"SDK client cache initialized.\");\n   * }).subscribe(\"SELECT * FROM User\");\n   *\n   * subscription.unsubscribe();\n   * ```\n   */\n  subscribe(\n    query_sql: string | string[]\n  ): SubscriptionHandleImpl<DBView, Reducers, SetReducerFlags> {\n    const queries = Array.isArray(query_sql) ? query_sql : [query_sql];\n    if (queries.length === 0) {\n      throw new Error('Subscriptions must have at least one query');\n    }\n    return new SubscriptionHandleImpl(\n      this.db,\n      queries,\n      this.#onApplied,\n      this.#onError\n    );\n  }\n\n  /**\n   * Subscribes to all rows from all tables.\n   *\n   * This method is intended as a convenience\n   * for applications where client-side memory use and network bandwidth are not concerns.\n   * Applications where these resources are a constraint\n   * should register more precise queries via `subscribe`\n   * in order to replicate only the subset of data which the client needs to function.\n   *\n   * This method should not be combined with `subscribe` on the same `DbConnection`.\n   * A connection may either `subscribe` to particular queries,\n   * or `subscribeToAllTables`, but not both.\n   * Attempting to call `subscribe`\n   * on a `DbConnection` that has previously used `subscribeToAllTables`,\n   * or vice versa, may misbehave in any number of ways,\n   * including dropping subscriptions, corrupting the client cache, or throwing errors.\n   */\n  subscribeToAllTables(): void {\n    this.subscribe('SELECT * FROM *');\n  }\n}\n\nexport type SubscribeEvent = 'applied' | 'error' | 'end';\n\nexport class SubscriptionManager {\n  subscriptions: Map<\n    number,\n    { handle: SubscriptionHandleImpl; emitter: EventEmitter<SubscribeEvent> }\n  > = new Map();\n}\n\nexport class SubscriptionHandleImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> {\n  #queryId: number;\n  #unsubscribeCalled: boolean = false;\n  #endedState: boolean = false;\n  #activeState: boolean = false;\n  #emitter: EventEmitter<SubscribeEvent, (...args: any[]) => void> =\n    new EventEmitter();\n\n  constructor(\n    private db: DbConnectionImpl<DBView, Reducers, SetReducerFlags>,\n    querySql: string[],\n    onApplied?: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void,\n    private onError?: (\n      ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>,\n      error: Error\n    ) => void\n  ) {\n    this.#emitter.on(\n      'applied',\n      (\n        ctx: SubscriptionEventContextInterface<\n          DBView,\n          Reducers,\n          SetReducerFlags\n        >\n      ) => {\n        this.#activeState = true;\n        if (onApplied) {\n          onApplied(ctx);\n        }\n      }\n    );\n    this.#emitter.on(\n      'error',\n      (\n        ctx: ErrorContextInterface<DBView, Reducers, SetReducerFlags>,\n        error: Error\n      ) => {\n        if (this.onError) {\n          this.onError(ctx, error);\n        }\n      }\n    );\n    this.#queryId = this.db.registerSubscription(this, this.#emitter, querySql);\n  }\n\n  /**\n   * Consumes self and issues an `Unsubscribe` message,\n   * removing this query from the client's set of subscribed queries.\n   * It is only valid to call this method if `is_active()` is `true`.\n   */\n  unsubscribe(): void {\n    if (this.#unsubscribeCalled) {\n      throw new Error('Unsubscribe has already been called');\n    }\n    this.#unsubscribeCalled = true;\n    this.db.unregisterSubscription(this.#queryId);\n    this.db['unsubscribe'](this.#queryId);\n  }\n\n  /**\n   * Unsubscribes and also registers a callback to run upon success.\n   * I.e. when an `UnsubscribeApplied` message is received.\n   *\n   * If `Unsubscribe` returns an error,\n   * or if the `on_error` callback(s) are invoked before this subscription would end normally,\n   * the `on_end` callback is not invoked.\n   *\n   * @param onEnd - Callback to run upon successful unsubscribe.\n   */\n  unsubscribeThen(\n    onEnd: (\n      ctx: SubscriptionEventContextInterface<DBView, Reducers, SetReducerFlags>\n    ) => void\n  ): void {\n    if (this.#endedState) {\n      throw new Error('Subscription has already ended');\n    }\n    if (this.#unsubscribeCalled) {\n      throw new Error('Unsubscribe has already been called');\n    }\n    this.#unsubscribeCalled = true;\n    this.#emitter.on(\n      'end',\n      (\n        ctx: SubscriptionEventContextInterface<\n          DBView,\n          Reducers,\n          SetReducerFlags\n        >\n      ) => {\n        this.#endedState = true;\n        this.#activeState = false;\n        onEnd(ctx);\n      }\n    );\n  }\n\n  /**\n   * True if this `SubscriptionHandle` has ended,\n   * either due to an error or a call to `unsubscribe`.\n   *\n   * This is initially false, and becomes true when either the `on_end` or `on_error` callback is invoked.\n   * A subscription which has not yet been applied is not active, but is also not ended.\n   */\n  isEnded(): boolean {\n    return this.#endedState;\n  }\n\n  /**\n   * True if this `SubscriptionHandle` is active, meaning it has been successfully applied\n   * and has not since ended, either due to an error or a complete `unsubscribe` request-response pair.\n   *\n   * This corresponds exactly to the interval bounded at the start by the `on_applied` callback\n   * and at the end by either the `on_end` or `on_error` callback.\n   */\n  isActive(): boolean {\n    return this.#activeState;\n  }\n}\n","import { ConnectionId } from './connection_id';\nimport {\n  AlgebraicType,\n  ProductType,\n  ProductTypeElement,\n  SumType,\n  SumTypeVariant,\n} from './algebraic_type.ts';\nimport {\n  AlgebraicValue,\n  parseValue,\n  ProductValue,\n  type ReducerArgsAdapter,\n  type ValueAdapter,\n} from './algebraic_value.ts';\nimport BinaryReader from './binary_reader.ts';\nimport BinaryWriter from './binary_writer.ts';\nimport * as ws from './client_api/index.ts';\nimport { ClientCache } from './client_cache.ts';\nimport { DbConnectionBuilder } from './db_connection_builder.ts';\nimport { type DbContext } from './db_context.ts';\nimport type { Event } from './event.ts';\nimport {\n  type ErrorContextInterface,\n  type EventContextInterface,\n  type ReducerEventContextInterface,\n  type SubscriptionEventContextInterface,\n} from './event_context.ts';\nimport { EventEmitter } from './event_emitter.ts';\nimport { decompress } from './decompress.ts';\nimport type { Identity } from './identity.ts';\nimport type {\n  IdentityTokenMessage,\n  Message,\n  SubscribeAppliedMessage,\n  UnsubscribeAppliedMessage,\n} from './message_types.ts';\nimport type { ReducerEvent } from './reducer_event.ts';\nimport type RemoteModule from './spacetime_module.ts';\nimport {\n  TableCache,\n  type Operation,\n  type PendingCallback,\n  type TableUpdate,\n} from './table_cache.ts';\nimport { deepEqual, toPascalCase } from './utils.ts';\nimport { WebsocketDecompressAdapter } from './websocket_decompress_adapter.ts';\nimport type { WebsocketTestAdapter } from './websocket_test_adapter.ts';\nimport {\n  SubscriptionBuilderImpl,\n  SubscriptionHandleImpl,\n  SubscriptionManager,\n  type SubscribeEvent,\n} from './subscription_builder_impl.ts';\nimport { stdbLogger } from './logger.ts';\nimport type { ReducerRuntimeTypeInfo } from './spacetime_module.ts';\n\nexport {\n  AlgebraicType,\n  AlgebraicValue,\n  BinaryReader,\n  BinaryWriter,\n  DbConnectionBuilder,\n  deepEqual,\n  ProductType,\n  ProductTypeElement,\n  ProductValue,\n  SubscriptionBuilderImpl,\n  SumType,\n  SumTypeVariant,\n  TableCache,\n  type Event,\n  type ReducerArgsAdapter,\n  type ValueAdapter,\n};\n\nexport type {\n  DbContext,\n  EventContextInterface,\n  ReducerEventContextInterface,\n  SubscriptionEventContextInterface,\n  ErrorContextInterface,\n  ReducerEvent,\n};\n\nexport type ConnectionEvent = 'connect' | 'disconnect' | 'connectError';\nexport type CallReducerFlags = 'FullUpdate' | 'NoSuccessNotify';\n\ntype ReducerEventCallback<ReducerArgs extends any[] = any[]> = (\n  ctx: ReducerEventContextInterface,\n  ...args: ReducerArgs\n) => void;\ntype SubscriptionEventCallback = (\n  ctx: SubscriptionEventContextInterface\n) => void;\ntype ErrorCallback = (ctx: ErrorContextInterface) => void;\n\nfunction callReducerFlagsToNumber(flags: CallReducerFlags): number {\n  switch (flags) {\n    case 'FullUpdate':\n      return 0;\n    case 'NoSuccessNotify':\n      return 1;\n  }\n}\n\ntype DbConnectionConfig = {\n  uri: URL;\n  nameOrAddress: string;\n  identity?: Identity;\n  token?: string;\n  emitter: EventEmitter<ConnectionEvent>;\n  remoteModule: RemoteModule;\n  createWSFn: typeof WebsocketDecompressAdapter.createWebSocketFn;\n  compression: 'gzip' | 'none';\n  lightMode: boolean;\n};\n\nexport class DbConnectionImpl<\n  DBView = any,\n  Reducers = any,\n  SetReducerFlags = any,\n> implements DbContext<DBView, Reducers>\n{\n  /**\n   * Whether or not the connection is active.\n   */\n  isActive = false;\n\n  /**\n   * This connection's public identity.\n   */\n  identity?: Identity = undefined;\n\n  /**\n   * This connection's private authentication token.\n   */\n  token?: string = undefined;\n\n  /**\n   * The accessor field to access the tables in the database and associated\n   * callback functions.\n   */\n  db: DBView;\n\n  /**\n   * The accessor field to access the reducers in the database and associated\n   * callback functions.\n   */\n  reducers: Reducers;\n\n  /**\n   * The accessor field to access functions related to setting flags on\n   * reducers regarding how the server should handle the reducer call and\n   * the events that it sends back to the client.\n   */\n  setReducerFlags: SetReducerFlags;\n\n  /**\n   * The `ConnectionId` of the connection to to the database.\n   */\n  connectionId: ConnectionId = ConnectionId.random();\n\n  // These fields are meant to be strictly private.\n  #queryId = 0;\n  #emitter: EventEmitter<ConnectionEvent>;\n  #reducerEmitter: EventEmitter<string, ReducerEventCallback> =\n    new EventEmitter();\n  #onApplied?: SubscriptionEventCallback;\n  #remoteModule: RemoteModule;\n  #messageQueue = Promise.resolve();\n  #subscriptionManager = new SubscriptionManager();\n\n  // These fields are not part of the public API, but in a pinch you\n  // could use JavaScript to access them by bypassing TypeScript's\n  // private fields.\n  // We use them in testing.\n  private clientCache: ClientCache;\n  private ws?: WebsocketDecompressAdapter | WebsocketTestAdapter;\n  private wsPromise: Promise<WebsocketDecompressAdapter | WebsocketTestAdapter>;\n\n  constructor({\n    uri,\n    nameOrAddress,\n    identity,\n    token,\n    emitter,\n    remoteModule,\n    createWSFn,\n    compression,\n    lightMode,\n  }: DbConnectionConfig) {\n    stdbLogger('info', 'Connecting to SpacetimeDB WS...');\n\n    let url = new URL(`v1/database/${nameOrAddress}/subscribe`, uri);\n\n    if (!/^wss?:/.test(uri.protocol)) {\n      url.protocol = 'ws:';\n    }\n\n    this.identity = identity;\n    this.token = token;\n\n    this.#remoteModule = remoteModule;\n    this.#emitter = emitter;\n\n    let connectionId = this.connectionId.toHexString();\n    url.searchParams.set('connection_id', connectionId);\n\n    this.clientCache = new ClientCache();\n    this.db = this.#remoteModule.dbViewConstructor(this);\n    this.setReducerFlags = this.#remoteModule.setReducerFlagsConstructor();\n    this.reducers = this.#remoteModule.reducersConstructor(\n      this,\n      this.setReducerFlags\n    );\n\n    this.wsPromise = createWSFn({\n      url,\n      wsProtocol: 'v1.bsatn.spacetimedb',\n      authToken: token,\n      compression: compression,\n      lightMode: lightMode,\n    })\n      .then(v => {\n        this.ws = v;\n\n        this.ws.onclose = () => {\n          this.#emitter.emit('disconnect', this);\n        };\n        this.ws.onerror = (e: ErrorEvent) => {\n          this.#emitter.emit('connectError', this, e);\n        };\n        this.ws.onopen = this.#handleOnOpen.bind(this);\n        this.ws.onmessage = this.#handleOnMessage.bind(this);\n\n        return v;\n      })\n      .catch(e => {\n        stdbLogger('error', 'Error connecting to SpacetimeDB WS');\n        this.#on('connectError', e);\n        // TODO(cloutiertyler): I don't know but this makes it compile and\n        // I don't have time to investigate how to do this properly.\n        // Otherwise `.catch` returns void.\n        throw e;\n      });\n  }\n\n  #getNextQueryId = () => {\n    const queryId = this.#queryId;\n    this.#queryId += 1;\n    return queryId;\n  };\n\n  // NOTE: This is very important!!! This is the actual function that\n  // gets called when you call `connection.subscriptionBuilder()`.\n  // The `subscriptionBuilder` function which is generated, just shadows\n  // this function in the type system, but not the actual implementation!\n  // Do not remove this function, or shoot yourself in the foot please.\n  // It's not clear what would be a better way to do this at this exact\n  // moment.\n  subscriptionBuilder = (): SubscriptionBuilderImpl => {\n    return new SubscriptionBuilderImpl(this);\n  };\n\n  registerSubscription(\n    handle: SubscriptionHandleImpl<DBView, Reducers, SetReducerFlags>,\n    handleEmitter: EventEmitter<SubscribeEvent, SubscriptionEventCallback>,\n    querySql: string[]\n  ): number {\n    const queryId = this.#getNextQueryId();\n    this.#subscriptionManager.subscriptions.set(queryId, {\n      handle,\n      emitter: handleEmitter,\n    });\n    this.#sendMessage(\n      ws.ClientMessage.SubscribeMulti({\n        queryStrings: querySql,\n        queryId: { id: queryId },\n        // The TypeScript SDK doesn't currently track `request_id`s,\n        // so always use 0.\n        requestId: 0,\n      })\n    );\n    return queryId;\n  }\n\n  unregisterSubscription(queryId: number): void {\n    this.#sendMessage(\n      ws.ClientMessage.UnsubscribeMulti({\n        queryId: { id: queryId },\n        // The TypeScript SDK doesn't currently track `request_id`s,\n        // so always use 0.\n        requestId: 0,\n      })\n    );\n  }\n\n  // This function is async because we decompress the message async\n  async #processParsedMessage(\n    message: ws.ServerMessage\n  ): Promise<Message | undefined> {\n    const parseRowList = (\n      type: 'insert' | 'delete',\n      tableName: string,\n      rowList: ws.BsatnRowList\n    ): Operation[] => {\n      const buffer = rowList.rowsData;\n      const reader = new BinaryReader(buffer);\n      const rows: any[] = [];\n      const rowType = this.#remoteModule.tables[tableName]!.rowType;\n      while (reader.offset < buffer.length + buffer.byteOffset) {\n        const initialOffset = reader.offset;\n        const row = rowType.deserialize(reader);\n        // This is super inefficient, but the buffer indexes are weird, so we are doing this for now.\n        // We should just base64 encode the bytes.\n        const rowId = JSON.stringify(row, (_, v) =>\n          typeof v === 'bigint' ? v.toString() : v\n        );\n        rows.push({\n          type,\n          rowId,\n          row,\n        });\n      }\n      return rows;\n    };\n\n    const parseTableUpdate = async (\n      rawTableUpdate: ws.TableUpdate\n    ): Promise<TableUpdate> => {\n      const tableName = rawTableUpdate.tableName;\n      let operations: Operation[] = [];\n      for (const update of rawTableUpdate.updates) {\n        let decompressed: ws.QueryUpdate;\n        if (update.tag === 'Gzip') {\n          const decompressedBuffer = await decompress(update.value, 'gzip');\n          decompressed = ws.QueryUpdate.deserialize(\n            new BinaryReader(decompressedBuffer)\n          );\n        } else if (update.tag === 'Brotli') {\n          throw new Error(\n            'Brotli compression not supported. Please use gzip or none compression in withCompression method on DbConnection.'\n          );\n        } else {\n          decompressed = update.value;\n        }\n        operations = operations.concat(\n          parseRowList('insert', tableName, decompressed.inserts)\n        );\n        operations = operations.concat(\n          parseRowList('delete', tableName, decompressed.deletes)\n        );\n      }\n      return {\n        tableName,\n        operations,\n      };\n    };\n\n    const parseDatabaseUpdate = async (\n      dbUpdate: ws.DatabaseUpdate\n    ): Promise<TableUpdate[]> => {\n      const tableUpdates: TableUpdate[] = [];\n      for (const rawTableUpdate of dbUpdate.tables) {\n        tableUpdates.push(await parseTableUpdate(rawTableUpdate));\n      }\n      return tableUpdates;\n    };\n\n    switch (message.tag) {\n      case 'InitialSubscription': {\n        const dbUpdate = message.value.databaseUpdate;\n        const tableUpdates = await parseDatabaseUpdate(dbUpdate);\n        const subscriptionUpdate: Message = {\n          tag: 'InitialSubscription',\n          tableUpdates,\n        };\n        return subscriptionUpdate;\n      }\n\n      case 'TransactionUpdateLight': {\n        const dbUpdate = message.value.update;\n        const tableUpdates = await parseDatabaseUpdate(dbUpdate);\n        const subscriptionUpdate: Message = {\n          tag: 'TransactionUpdateLight',\n          tableUpdates,\n        };\n        return subscriptionUpdate;\n      }\n\n      case 'TransactionUpdate': {\n        const txUpdate = message.value;\n        const identity = txUpdate.callerIdentity;\n        const connectionId = ConnectionId.nullIfZero(\n          txUpdate.callerConnectionId\n        );\n        const reducerName: string = txUpdate.reducerCall.reducerName;\n        const args = txUpdate.reducerCall.args;\n        const energyQuantaUsed = txUpdate.energyQuantaUsed;\n\n        let tableUpdates: TableUpdate[];\n        let errMessage = '';\n        switch (txUpdate.status.tag) {\n          case 'Committed':\n            tableUpdates = await parseDatabaseUpdate(txUpdate.status.value);\n            break;\n          case 'Failed':\n            tableUpdates = [];\n            errMessage = txUpdate.status.value;\n            break;\n          case 'OutOfEnergy':\n            tableUpdates = [];\n            break;\n        }\n\n        // TODO: Can `reducerName` be '<none>'?\n        // See: https://github.com/clockworklabs/SpacetimeDB/blob/a2a1b5d9b2e0ebaaf753d074db056d319952d442/crates/core/src/client/message_handlers.rs#L155\n        if (reducerName === '<none>') {\n          let errorMessage = errMessage;\n          console.error(`Received an error from the database: ${errorMessage}`);\n          return;\n        }\n\n        let reducerInfo:\n          | {\n              reducerName: string;\n              args: Uint8Array;\n            }\n          | undefined;\n        if (reducerName !== '') {\n          reducerInfo = {\n            reducerName,\n            args,\n          };\n        }\n\n        const transactionUpdate: Message = {\n          tag: 'TransactionUpdate',\n          tableUpdates,\n          identity,\n          connectionId,\n          reducerInfo,\n          status: txUpdate.status,\n          energyConsumed: energyQuantaUsed.quanta,\n          message: errMessage,\n          timestamp: txUpdate.timestamp,\n        };\n        return transactionUpdate;\n      }\n\n      case 'IdentityToken': {\n        const identityTokenMessage: IdentityTokenMessage = {\n          tag: 'IdentityToken',\n          identity: message.value.identity,\n          token: message.value.token,\n          connectionId: message.value.connectionId,\n        };\n        return identityTokenMessage;\n      }\n\n      case 'OneOffQueryResponse': {\n        throw new Error(\n          `TypeScript SDK never sends one-off queries, but got OneOffQueryResponse ${message}`\n        );\n      }\n\n      case 'SubscribeMultiApplied': {\n        const parsedTableUpdates = await parseDatabaseUpdate(\n          message.value.update\n        );\n        const subscribeAppliedMessage: SubscribeAppliedMessage = {\n          tag: 'SubscribeApplied',\n          queryId: message.value.queryId.id,\n          tableUpdates: parsedTableUpdates,\n        };\n        return subscribeAppliedMessage;\n      }\n\n      case 'UnsubscribeMultiApplied': {\n        const parsedTableUpdates = await parseDatabaseUpdate(\n          message.value.update\n        );\n        const unsubscribeAppliedMessage: UnsubscribeAppliedMessage = {\n          tag: 'UnsubscribeApplied',\n          queryId: message.value.queryId.id,\n          tableUpdates: parsedTableUpdates,\n        };\n        return unsubscribeAppliedMessage;\n      }\n\n      case 'SubscriptionError': {\n        return {\n          tag: 'SubscriptionError',\n          queryId: message.value.queryId,\n          error: message.value.error,\n        };\n      }\n    }\n  }\n\n  #sendMessage(message: ws.ClientMessage): void {\n    this.wsPromise.then(wsResolved => {\n      const writer = new BinaryWriter(1024);\n      ws.ClientMessage.serialize(writer, message);\n      const encoded = writer.getBuffer();\n      wsResolved.send(encoded);\n    });\n  }\n\n  /**\n   * Handles WebSocket onOpen event.\n   */\n  #handleOnOpen(): void {\n    this.isActive = true;\n  }\n\n  #applyTableUpdates(\n    tableUpdates: TableUpdate[],\n    eventContext: EventContextInterface\n  ): PendingCallback[] {\n    const pendingCallbacks: PendingCallback[] = [];\n    for (let tableUpdate of tableUpdates) {\n      // Get table information for the table being updated\n      const tableName = tableUpdate.tableName;\n      const tableTypeInfo = this.#remoteModule.tables[tableName]!;\n      const table = this.clientCache.getOrCreateTable(tableTypeInfo);\n      pendingCallbacks.push(\n        ...table.applyOperations(tableUpdate.operations, eventContext)\n      );\n    }\n    return pendingCallbacks;\n  }\n\n  async #processMessage(data: Uint8Array): Promise<void> {\n    const serverMessage = parseValue(ws.ServerMessage, data);\n    const message = await this.#processParsedMessage(serverMessage);\n    if (!message) {\n      return;\n    }\n    switch (message.tag) {\n      case 'InitialSubscription': {\n        let event: Event<never> = { tag: 'SubscribeApplied' };\n\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        // Remove the event from the subscription event context\n        // It is not a field in the type narrowed SubscriptionEventContext\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n\n        if (this.#emitter) {\n          this.#onApplied?.(subscriptionEventContext);\n        }\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'TransactionUpdateLight': {\n        let event: Event<never> = { tag: 'UnknownTransaction' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'TransactionUpdate': {\n        let reducerInfo = message.reducerInfo;\n        let unknownTransaction = false;\n        let reducerArgs: any | undefined;\n        let reducerTypeInfo: ReducerRuntimeTypeInfo | undefined;\n        if (!reducerInfo) {\n          unknownTransaction = true;\n        } else {\n          reducerTypeInfo =\n            this.#remoteModule.reducers[reducerInfo.reducerName];\n          try {\n            const reader = new BinaryReader(reducerInfo.args as Uint8Array);\n            reducerArgs = reducerTypeInfo.argsType.deserialize(reader);\n          } catch {\n            // This should only be printed in development, since it's\n            // possible for clients to receive new reducers that they don't\n            // know about.\n            console.debug('Failed to deserialize reducer arguments');\n            unknownTransaction = true;\n          }\n        }\n\n        if (unknownTransaction) {\n          const event: Event<never> = { tag: 'UnknownTransaction' };\n          const eventContext = this.#remoteModule.eventContextConstructor(\n            this,\n            event\n          );\n          const callbacks = this.#applyTableUpdates(\n            message.tableUpdates,\n            eventContext\n          );\n\n          for (const callback of callbacks) {\n            callback.cb();\n          }\n          return;\n        }\n\n        // At this point, we know that `reducerInfo` is not null because\n        // we return if `unknownTransaction` is true.\n        reducerInfo = reducerInfo!;\n        reducerTypeInfo = reducerTypeInfo!;\n\n        // Thus this must be a reducer event create it and emit it.\n        const reducerEvent = {\n          callerIdentity: message.identity,\n          status: message.status,\n          callerConnectionId: message.connectionId as ConnectionId,\n          timestamp: message.timestamp,\n          energyConsumed: message.energyConsumed,\n          reducer: {\n            name: reducerInfo.reducerName,\n            args: reducerArgs,\n          },\n        };\n        const event: Event<typeof reducerEvent.reducer> = {\n          tag: 'Reducer',\n          value: reducerEvent,\n        };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const reducerEventContext = {\n          ...eventContext,\n          event: reducerEvent,\n        };\n\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n\n        const argsArray: any[] = [];\n        reducerTypeInfo.argsType.product.elements.forEach((element, index) => {\n          argsArray.push(reducerArgs[element.name]);\n        });\n        this.#reducerEmitter.emit(\n          reducerInfo.reducerName,\n          reducerEventContext,\n          ...argsArray\n        );\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'IdentityToken': {\n        this.identity = message.identity;\n        if (!this.token && message.token) {\n          this.token = message.token;\n        }\n        this.connectionId = message.connectionId;\n        this.#emitter.emit('connect', this, this.identity, this.token);\n        break;\n      }\n      case 'SubscribeApplied': {\n        const event: Event<never> = { tag: 'SubscribeApplied' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        this.#subscriptionManager.subscriptions\n          .get(message.queryId)\n          ?.emitter.emit('applied', subscriptionEventContext);\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'UnsubscribeApplied': {\n        const event: Event<never> = { tag: 'UnsubscribeApplied' };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const { event: _, ...subscriptionEventContext } = eventContext;\n        const callbacks = this.#applyTableUpdates(\n          message.tableUpdates,\n          eventContext\n        );\n        this.#subscriptionManager.subscriptions\n          .get(message.queryId)\n          ?.emitter.emit('end', subscriptionEventContext);\n        for (const callback of callbacks) {\n          callback.cb();\n        }\n        break;\n      }\n      case 'SubscriptionError': {\n        const error = Error(message.error);\n        const event: Event<never> = { tag: 'Error', value: error };\n        const eventContext = this.#remoteModule.eventContextConstructor(\n          this,\n          event\n        );\n        const errorContext = {\n          ...eventContext,\n          event: error,\n        };\n        if (message.queryId) {\n          this.#subscriptionManager.subscriptions\n            .get(message.queryId)\n            ?.emitter.emit('error', errorContext, error);\n        } else {\n          console.error('Received an error message without a queryId: ', error);\n          // TODO: This should actually kill the connection.\n          // A subscription error without a specific subscription means we aren't receiving\n          // updates for all of our subscriptions, so our cache is out of sync.\n\n          // Send it to all of them:\n          this.#subscriptionManager.subscriptions.forEach(({ emitter }) => {\n            emitter.emit('error', errorContext, error);\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles WebSocket onMessage event.\n   * @param wsMessage MessageEvent object.\n   */\n  #handleOnMessage(wsMessage: { data: Uint8Array }): void {\n    // Utilize promise chaining to ensure that we process messages in order\n    // even though we are processing them asyncronously. This will not begin\n    // processing the next message until we await the processing of the\n    // current message.\n    this.#messageQueue = this.#messageQueue.then(() => {\n      return this.#processMessage(wsMessage.data);\n    });\n  }\n\n  /**\n   * Call a reducer on your SpacetimeDB module.\n   *\n   * @param reducerName The name of the reducer to call\n   * @param argsSerializer The arguments to pass to the reducer\n   */\n  callReducer(\n    reducerName: string,\n    argsBuffer: Uint8Array,\n    flags: CallReducerFlags\n  ): void {\n    const message = ws.ClientMessage.CallReducer({\n      reducer: reducerName,\n      args: argsBuffer,\n      // The TypeScript SDK doesn't currently track `request_id`s,\n      // so always use 0.\n      requestId: 0,\n      flags: callReducerFlagsToNumber(flags),\n    });\n    this.#sendMessage(message);\n  }\n\n  /**\n   * Close the current connection.\n   *\n   * @example\n   *\n   * ```ts\n   * const connection = DbConnection.builder().build();\n   * connection.disconnect()\n   * ```\n   */\n  disconnect(): void {\n    this.wsPromise.then(wsResolved => {\n      wsResolved.close();\n    });\n  }\n\n  #on(\n    eventName: ConnectionEvent,\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on(eventName, callback);\n  }\n\n  #off(\n    eventName: ConnectionEvent,\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off(eventName, callback);\n  }\n\n  #onConnect(callback: (ctx: DbConnectionImpl, ...args: any[]) => void): void {\n    this.#emitter.on('connect', callback);\n  }\n\n  #onDisconnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on('disconnect', callback);\n  }\n\n  #onConnectError(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.on('connectError', callback);\n  }\n\n  #removeOnConnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('connect', callback);\n  }\n\n  #removeOnDisconnect(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('disconnect', callback);\n  }\n\n  #removeOnConnectError(\n    callback: (ctx: DbConnectionImpl, ...args: any[]) => void\n  ): void {\n    this.#emitter.off('connectError', callback);\n  }\n\n  // Note: This is required to be public because it needs to be\n  // called from the `RemoteReducers` class.\n  onReducer(reducerName: string, callback: ReducerEventCallback): void {\n    this.#reducerEmitter.on(reducerName, callback);\n  }\n\n  // Note: This is required to be public because it needs to be\n  // called from the `RemoteReducers` class.\n  offReducer(reducerName: string, callback: ReducerEventCallback): void {\n    this.#reducerEmitter.off(reducerName, callback);\n  }\n}\n"]}